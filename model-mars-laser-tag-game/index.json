{
  "api/LaserTagBox.Model.Body.DataVisualizationServer.html": {
    "href": "api/LaserTagBox.Model.Body.DataVisualizationServer.html",
    "title": "Class DataVisualizationServer | Mars Laser Tag Game",
    "summary": "Class DataVisualizationServer Namespace LaserTagBox.Model.Body Assembly LaserTagBox.dll public static class DataVisualizationServer Inheritance object DataVisualizationServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CurrentTick public static volatile int CurrentTick Field Value int Methods Connected() public static bool Connected() Returns bool RunInBackground() public static void RunInBackground() SendData(IEnumerable<PlayerBody>, IEnumerable<Item>, Dictionary<Color, TeamScore>, IEnumerable<ExplosiveBarrel>) public static void SendData(IEnumerable<PlayerBody> bodies, IEnumerable<Item> items, Dictionary<Color, TeamScore> scores, IEnumerable<ExplosiveBarrel> explosiveBarrels) Parameters bodies IEnumerable<PlayerBody> items IEnumerable<Item> scores Dictionary<Color, TeamScore> explosiveBarrels IEnumerable<ExplosiveBarrel> Start() public static void Start() Stop() public static void Stop()"
  },
  "api/LaserTagBox.Model.Body.MovingAgent.html": {
    "href": "api/LaserTagBox.Model.Body.MovingAgent.html",
    "title": "Class MovingAgent | Mars Laser Tag Game",
    "summary": "Class MovingAgent Namespace LaserTagBox.Model.Body Assembly LaserTagBox.dll Encapsulates the movement properties and capabilities of a LaserTag agent public abstract class MovingAgent : IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object MovingAgent Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Derived PlayerBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Battleground protected PlayerBodyLayer Battleground Field Value PlayerBodyLayer Properties Color [PropertyDescription(Name = \"team\")] public Color Color { get; set; } Property Value Color HasMoved protected bool HasMoved { get; set; } Property Value bool ID public Guid ID { get; set; } Property Value Guid MemberId [PropertyDescription(Name = \"memberId\")] public int MemberId { get; set; } Property Value int MovementDelayCounter protected double MovementDelayCounter { get; set; } Property Value double MovementDelayPenalty protected double MovementDelayPenalty { get; } Property Value double Position public Position Position { get; set; } Property Value Position Stance public Stance Stance { get; protected set; } Property Value Stance VisibilityRange public double VisibilityRange { get; } Property Value double VisualRange public double VisualRange { get; } Property Value double XCor public double XCor { get; } Property Value double XSpawn [PropertyDescription(Name = \"xSpawn\")] public int XSpawn { get; set; } Property Value int YCor public double YCor { get; } Property Value double YSpawn [PropertyDescription(Name = \"ySpawn\")] public int YSpawn { get; set; } Property Value int Methods GoTo(Position) public bool GoTo(Position goal) Parameters goal Position Returns bool Init(PlayerBodyLayer) public void Init(PlayerBodyLayer layer) Parameters layer PlayerBodyLayer InsertIntoEnv() protected abstract void InsertIntoEnv() MoveToPosition(Position) protected abstract Position MoveToPosition(Position position) Parameters position Position Returns Position Tick() public virtual void Tick()"
  },
  "api/LaserTagBox.Model.Body.PlayerBody.html": {
    "href": "api/LaserTagBox.Model.Body.PlayerBody.html",
    "title": "Class PlayerBody | Mars Laser Tag Game",
    "summary": "Class PlayerBody Namespace LaserTagBox.Model.Body Assembly LaserTagBox.dll Represents the spatially explicit body of a LaserTag agent that is situated in the LaserTag environment. public class PlayerBody : MovingAgent, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPlayerBody, IPositionable Inheritance object MovingAgent PlayerBody Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPlayerBody IPositionable Inherited Members MovingAgent.ID MovingAgent.Battleground MovingAgent.MemberId MovingAgent.XSpawn MovingAgent.YSpawn MovingAgent.Color MovingAgent.Stance MovingAgent.MovementDelayCounter MovingAgent.HasMoved MovingAgent.Position MovingAgent.XCor MovingAgent.YCor MovingAgent.Init(PlayerBodyLayer) MovingAgent.VisualRange MovingAgent.VisibilityRange MovingAgent.MovementDelayPenalty MovingAgent.GoTo(Position) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActionPoints Points that can be spent on actions per tick. public int ActionPoints { get; } Property Value int Alive Represents the agent's vital state. public bool Alive { get; } Property Value bool CarryingFlag Determines whether the agent is carrying the flag. public bool CarryingFlag { get; set; } Property Value bool Energy The agent's current energy count. public int Energy { get; } Property Value int GamePoints The agent's point count (for tagging enemy agents, etc.). public int GamePoints { get; } Property Value int RemainingShots The remaining number of shots (tagging opportunities) of the agent. public int RemainingShots { get; } Property Value int TeamName The name of the team to which the agent belongs. public string TeamName { get; set; } Property Value string WasTaggedLastTick Returns true if the agent was tagged during the last tick (i.e., the tick before the current tick). public bool WasTaggedLastTick { get; } Property Value bool Methods ChangeStance2(Stance) Changes the agent's current stance to the given stance. public void ChangeStance2(Stance newStance) Parameters newStance Stance The given stance ExploreBarrels1() Explores all ExplosiveBarrel s in sight of the agent. Costs 1 action point. public List<Position> ExploreBarrels1() Returns List<Position> ExploreBarriers1() Explores the barriers in the agent's field of vision. public List<Position> ExploreBarriers1() Returns List<Position> A list of Barrier objects or null if the caller does not have enough ActionPoints ExploreDitches1() Explores the ditches in the agent's field of vision. public List<Position> ExploreDitches1() Returns List<Position> A list of Ditch objects or null if the caller does not have enough ActionPoints ExploreEnemies1() Explores enemy agents in the agent's field of vision. public List<EnemySnapshot> ExploreEnemies1() Returns List<EnemySnapshot> A list of EnemySnapshot objects or null if the caller does not have enough ActionPoints ExploreEnemyFlagStands1() Explores the enemy flag stands. public List<Position> ExploreEnemyFlagStands1() Returns List<Position> ExploreExplosiveBarrels1() Explores all explodable ExplosiveBarrel s in sight of the agent. Costs 1 action point. public List<Position> ExploreExplosiveBarrels1() Returns List<Position> ExploreFlags2() Explores the flags. public List<FlagSnapshot> ExploreFlags2() Returns List<FlagSnapshot> ExploreHills1() Explores the hills in the agent's field of vision. public List<Position> ExploreHills1() Returns List<Position> A list of Hill objects or null if the caller does not have enough ActionPoints ExploreOwnFlagStand() Explores the position of the own flag stand. public Position ExploreOwnFlagStand() Returns Position ExploreTeam() Explores the agent's team members across the entire environment. public List<FriendSnapshot> ExploreTeam() Returns List<FriendSnapshot> A list of FriendSnapshot objects ExploreWater1() Explores the water bodies in the agent's field of vision. public List<Position> ExploreWater1() Returns List<Position> GetDistance(Position) Returns the distance from the caller to the given position, using the Manhattan distance measure. public int GetDistance(Position position) Parameters position Position The position whose distance to the caller is to be determined Returns int An integer that represents the calculated distance HasBeeline1(Position) Determines whether there exists a direct line of sight between the caller and the given position public bool HasBeeline1(Position other) Parameters other Position The position whose line of sight relative to the caller is to be determined Returns bool true if there exists an open line of sight between the caller's position and the given position. false if no such line of sight exists or if the caller does not have enough ActionPoints. InsertIntoEnv() Inserts the agent into the LaserTag environment. protected override void InsertIntoEnv() MoveToPosition(Position) Moves the agent to the given position. protected override Position MoveToPosition(Position position) Parameters position Position The position to which the agent is to be moved. Returns Position The position to which the agent was moved Reload3() Refills the ammunition of the agent's tagging weapon. public void Reload3() Respawn() Respawns the agent at its flag stand. public void Respawn() Tag5(Position) Shoots at the given Position. Returns true if shot was successfully executed, otherwise false. public bool Tag5(Position aimedPosition) Parameters aimedPosition Position The position to be shot at Returns bool true if an enemy on the given position was tagged, false otherwise Exceptions ArgumentOutOfRangeException Thrown if a player has an invalid Stance TakeExplosionDamage(int) Handles the agent's explosion damage. public void TakeExplosionDamage(int damage) Parameters damage int Tick() The behavior routine of the spatially explicit component of the LaserTag agent, which is executed automatically by the LaserTag framework. public override void Tick() Exceptions InvalidOperationException Thrown if this method is called manually"
  },
  "api/LaserTagBox.Model.Body.PlayerBodyLayer.html": {
    "href": "api/LaserTagBox.Model.Body.PlayerBodyLayer.html",
    "title": "Class PlayerBodyLayer | Mars Laser Tag Game",
    "summary": "Class PlayerBodyLayer Namespace LaserTagBox.Model.Body Assembly LaserTagBox.dll A layer type that represents the spatial environment and holds the spatially explicit bodies of the LaserTag agents. public class PlayerBodyLayer : RasterLayer, IRasterLayer, IDataLayer, IRaster<double>, IEnvelopDataLayer, IDataSet, IDisposable, IChangingLayer, ISteppedActiveLayer, ILayer, ITickClient, IModelObject Inheritance object AbstractLayer AbstractEnvelopedLayer RasterLayer PlayerBodyLayer Implements IRasterLayer IDataLayer IRaster<double> IEnvelopDataLayer IDataSet IDisposable IChangingLayer ISteppedActiveLayer ILayer ITickClient IModelObject Inherited Members RasterLayer.SetCurrentTick(long) RasterLayer.GetCurrentTick() RasterLayer.SerializeValueCells() RasterLayer.Increase(int, int, double) RasterLayer.Increase(double, double, double) RasterLayer.Reduce(int, int, double) RasterLayer.Reduce(double, double, double) RasterLayer.IsInRaster(Position) RasterLayer.Explore(Position, double, int, Func<double, bool>) RasterLayer.GetNeighbourCellWithMaxValue(Position) RasterLayer.ParseData(string) RasterLayer.GetValueByGeoPosition(Position) RasterLayer.GetValue(Position) RasterLayer.ConvertToGridCoordinate(double, double, out int) RasterLayer.IsRoutable(int, int) RasterLayer.IsRoutable(double, double) RasterLayer.IsRoutable(Position) RasterLayer.FindPath(Position, Position) RasterLayer.FindPath(int, int, int, int) RasterLayer.IsChanged RasterLayer.Width RasterLayer.Height RasterLayer.LowerLeft RasterLayer.UpperRight RasterLayer.CellHeight RasterLayer.CellWidth RasterLayer.NoDataValue RasterLayer.Count RasterLayer.Extent RasterLayer.this[Position] RasterLayer.this[double, double] RasterLayer.this[int, int] RasterLayer.DistanceMetric RasterLayer.AllowDiagonalMove AbstractEnvelopedLayer.Dispose() AbstractEnvelopedLayer.Dispose(bool) AbstractEnvelopedLayer.IsTemporalChanging AbstractEnvelopedLayer.MinLon AbstractEnvelopedLayer.MinLat AbstractEnvelopedLayer.MaxLon AbstractEnvelopedLayer.MaxLat AbstractEnvelopedLayer.IsDisposed AbstractLayer.Mapping AbstractLayer.RegisterAgent AbstractLayer.UnregisterAgent AbstractLayer.Context AbstractLayer.Container AbstractLayer.EntityManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AgentManager Responsible for creating new agents and initializing them with required dependencies. public IAgentManager AgentManager { get; } Property Value IAgentManager Bodies A dictionary of agent bodies, identified by their GUID. public Dictionary<Guid, PlayerBody> Bodies { get; } Property Value Dictionary<Guid, PlayerBody> FighterEnv Holds all agents in a 2-dimensional area for exploration purposes. public SpatialHashEnvironment<PlayerBody> FighterEnv { get; } Property Value SpatialHashEnvironment<PlayerBody> ItemEnv Holds all items in a 2-dimensional area for exploration purposes. public SpatialHashEnvironment<Item> ItemEnv { get; } Property Value SpatialHashEnvironment<Item> Items A dictionary of items, identified by their GUID. public Dictionary<Guid, Item> Items { get; } Property Value Dictionary<Guid, Item> Mode The game mode of the simulation. [PropertyDescription] public GameMode Mode { get; set; } Property Value GameMode Score A dictionary of scores, identified by the team name. public Dictionary<Color, TeamScore> Score { get; } Property Value Dictionary<Color, TeamScore> SpotEnv Holds all spots in a 2-dimensional area for exploration purposes. public SpatialHashEnvironment<Spot> SpotEnv { get; } Property Value SpatialHashEnvironment<Spot> Visualization Determines whether the layer should be visualized in a separate window. [PropertyDescription] public bool Visualization { get; set; } Property Value bool VisualizationTimeout The timeout for the visualization server to wait for the next tick. [PropertyDescription] public int VisualizationTimeout { get; set; } Property Value int Methods GetAgentOn(Position) Gets the agent body located on the given position. public PlayerBody GetAgentOn(Position position) Parameters position Position The position Returns PlayerBody The agent body located on the given position GetAll(Color) Gets all agent bodies of the given color. public List<PlayerBody> GetAll(Color color) Parameters color Color The color of the requested agent bodies Returns List<PlayerBody> A list of all identified agent bodies GetIntValue(Position) Gets the integer value stored in the cell identified by the given position. public int GetIntValue(Position position) Parameters position Position The position whose value is requested Returns int The value of the cell GetIntValue(double, double) Gets the integer value stored in the cell identified by the given coordinates. public int GetIntValue(double x, double y) Parameters x double The first dimension of the cell y double The second dimension of the cell Returns int The value of the cell HasBeeline(double, double, double, double) Returns true of there exists a straight line of sight between the given source position and target position, otherwise false. Implements Bresenham's Line Algorithm, which obtains a list of grid cells covered by a straight line between two points on a grid-based environment. For more information: http://tech-algorithm.com/articles/drawing-line-using-bresenham-algorithm/ public bool HasBeeline(double x1, double y1, double x2, double y2) Parameters x1 double The first dimension of the source position y1 double The second dimension of the source position x2 double The first dimension of the target position y2 double The second dimension of the target position Returns bool boolean InitLayer(LayerInitData, RegisterAgent, UnregisterAgent) Initialization routine of the layer type. Returns true if initialization was successful, otherwise false. public override bool InitLayer(LayerInitData layerInitData, RegisterAgent registerAgentHandle = null, UnregisterAgent unregisterAgentHandle = null) Parameters layerInitData LayerInitData External initialization and configuration data for constructing the layer and initializing agents. registerAgentHandle RegisterAgent A handle for registering agents with the simulation. unregisterAgentHandle UnregisterAgent A handle for unregistering agents from the simulation. Returns bool boolean NearestBarrier(Position) Gets the Barrier object with the smallest distance to the given position. public Barrier NearestBarrier(Position position) Parameters position Position The position from which the nearest Barrier is to be minimal Returns Barrier The identified Barrier object NearestDitch(Position) Gets the Ditch object with the smallest distance to the given position. public Ditch NearestDitch(Position position) Parameters position Position The position from which the nearest Ditch is to be minimal Returns Ditch The identified Ditch object NearestHill(Position) Gets the Hill object with the smallest distance to the given position. public Hill NearestHill(Position position) Parameters position Position The position from which the nearest Hill is to be minimal Returns Hill The identified Hill object PostTick() public void PostTick() PreTick() public void PreTick() Tick() public void Tick()"
  },
  "api/LaserTagBox.Model.Body.html": {
    "href": "api/LaserTagBox.Model.Body.html",
    "title": "Namespace LaserTagBox.Model.Body | Mars Laser Tag Game",
    "summary": "Namespace LaserTagBox.Model.Body Classes DataVisualizationServer MovingAgent Encapsulates the movement properties and capabilities of a LaserTag agent PlayerBody Represents the spatially explicit body of a LaserTag agent that is situated in the LaserTag environment. PlayerBodyLayer A layer type that represents the spatial environment and holds the spatially explicit bodies of the LaserTag agents."
  },
  "api/LaserTagBox.Model.Commons.html": {
    "href": "api/LaserTagBox.Model.Commons.html",
    "title": "Class Commons | Mars Laser Tag Game",
    "summary": "Class Commons Namespace LaserTagBox.Model Assembly LaserTagBox.dll public static class Commons Inheritance object Commons Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Line(int, int, int, int, int) public static void Line(int x, int y, int x2, int y2, int color) Parameters x int y int x2 int y2 int color int"
  },
  "api/LaserTagBox.Model.Items.Flag.html": {
    "href": "api/LaserTagBox.Model.Items.Flag.html",
    "title": "Class Flag | Mars Laser Tag Game",
    "summary": "Class Flag Namespace LaserTagBox.Model.Items Assembly LaserTagBox.dll public class Flag : Item, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Item Flag Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Inherited Members Item.Battleground Item.Position Item.PickedUp Item.ID Item.OwnerID Item.Owner Item.Init(PlayerBodyLayer) Item.Tick() Item.PickUp(PlayerBody) Item.Drop() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color public Color Color { get; set; } Property Value Color"
  },
  "api/LaserTagBox.Model.Items.Item.html": {
    "href": "api/LaserTagBox.Model.Items.Item.html",
    "title": "Class Item | Mars Laser Tag Game",
    "summary": "Class Item Namespace LaserTagBox.Model.Items Assembly LaserTagBox.dll public abstract class Item : IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Item Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Derived Flag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Owner public PlayerBody Owner Field Value PlayerBody Properties Battleground A reference to the environment in which the object is situated. protected PlayerBodyLayer Battleground { get; } Property Value PlayerBodyLayer ID The unique identifier of the object. public Guid ID { get; set; } Property Value Guid OwnerID public Guid OwnerID { get; } Property Value Guid PickedUp Indicates whether the object is picked up by an agent. public bool PickedUp { get; } Property Value bool Position The position of the object in the environment. public Position Position { get; set; } Property Value Position Methods Drop() public virtual void Drop() Init(PlayerBodyLayer) Initialization routine of the object. public virtual void Init(PlayerBodyLayer battleground) Parameters battleground PlayerBodyLayer A reference to the environment in which the object is to be situated. PickUp(PlayerBody) public virtual void PickUp(PlayerBody agent) Parameters agent PlayerBody Tick() The behavior routine of the object. (This is an abstract object without behavior). public virtual void Tick()"
  },
  "api/LaserTagBox.Model.Items.html": {
    "href": "api/LaserTagBox.Model.Items.html",
    "title": "Namespace LaserTagBox.Model.Items | Mars Laser Tag Game",
    "summary": "Namespace LaserTagBox.Model.Items Classes Flag Item"
  },
  "api/LaserTagBox.Model.Mind.AbstractPlayerMind.html": {
    "href": "api/LaserTagBox.Model.Mind.AbstractPlayerMind.html",
    "title": "Class AbstractPlayerMind | Mars Laser Tag Game",
    "summary": "Class AbstractPlayerMind Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll Create a subclass of AbstractPlayerMind for your own artificial intelligence. public abstract class AbstractPlayerMind : IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Derived Example7QL Example8Rule Example9QL Example1 Example10Rule Example2 Example3 Example4 Example5 Example6 FlagCollector IdleAgent SecondFlagCollector Shooter YourPlayerMindPleaseRename Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Body The body is the mind's interface to the world for exploration and interaction. public IPlayerBody Body { get; set; } Property Value IPlayerBody ID Just a unique identification. public Guid ID { get; set; } Property Value Guid Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public abstract void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public abstract void Tick()"
  },
  "api/LaserTagBox.Model.Mind.AgentState.html": {
    "href": "api/LaserTagBox.Model.Mind.AgentState.html",
    "title": "Class AgentState | Mars Laser Tag Game",
    "summary": "Class AgentState Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class AgentState Inheritance object AgentState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AgentState(Example7QL) public AgentState(Example7QL agent) Parameters agent Example7QL Properties Components public Dictionary<string, int> Components { get; } Property Value Dictionary<string, int> Methods GetQTableIndex() Calculates the state's q table index by using the component's bin length (Binning). public int GetQTableIndex() Returns int UpdateComponents() Updates the agnet's state components, which will change as soon as the agent performs actions. public void UpdateComponents()"
  },
  "api/LaserTagBox.Model.Mind.Example7QL.html": {
    "href": "api/LaserTagBox.Model.Mind.Example7QL.html",
    "title": "Class Example7QL | Mars Laser Tag Game",
    "summary": "Class Example7QL Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll A learning agent using Q-Learning and having a state, which consists of multiple components constituted by different physical attributes, like energy and ammunition level. public class Example7QL : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example7QL Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Ditches public HashSet<Position> Ditches Field Value HashSet<Position> Enemies public HashSet<EnemySnapshot> Enemies Field Value HashSet<EnemySnapshot> Hills public HashSet<Position> Hills Field Value HashSet<Position> Properties AlertedCounter public int AlertedCounter { get; } Property Value int CloseFriends public int CloseFriends { get; } Property Value int Intel public Intel Intel { get; } Property Value Intel MovedWithinTick public bool MovedWithinTick { get; } Property Value bool Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Executes the Q-Learning algorithm as long as action points are left. After each action being selected, the agent's state will be executed accordingly and the agent will be given a reward, which leads to an update of the q table. At the end of the game the q table will be written to a file. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Example8Rule.html": {
    "href": "api/LaserTagBox.Model.Mind.Example8Rule.html",
    "title": "Class Example8Rule | Mars Laser Tag Game",
    "summary": "Class Example8Rule Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class Example8Rule : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example8Rule Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Example9QL.Action.html": {
    "href": "api/LaserTagBox.Model.Mind.Example9QL.Action.html",
    "title": "Enum Example9QL.Action | Mars Laser Tag Game",
    "summary": "Enum Example9QL.Action Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public enum Example9QL.Action Fields ChangeStanceToKneeling2 = 2 ChangeStanceToLying2 = 3 ChangeStanceToStanding2 = 1 EndTick = 15 LookForBarriers1 = 6 LookForDitches1 = 4 LookForEnemies1 = 7 LookForHills1 = 5 MoveToAlly = 12 MoveToDitch = 9 MoveToHill = 8 MoveToRandom = 11 MoveToSharedEnemy = 10 MoveToTarget = 13 Reload3 = 0 TagTarget5 = 14"
  },
  "api/LaserTagBox.Model.Mind.Example9QL.Location.html": {
    "href": "api/LaserTagBox.Model.Mind.Example9QL.Location.html",
    "title": "Enum Example9QL.Location | Mars Laser Tag Game",
    "summary": "Enum Example9QL.Location Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public enum Example9QL.Location Fields Ditch = 2 Hill = 1 None = 0"
  },
  "api/LaserTagBox.Model.Mind.Example9QL.State.html": {
    "href": "api/LaserTagBox.Model.Mind.Example9QL.State.html",
    "title": "Class Example9QL.State | Mars Laser Tag Game",
    "summary": "Class Example9QL.State Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class Example9QL.State Inheritance object Example9QL.State Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors State() public State() State(int, bool, bool, bool, Location, Stance, int, bool) public State(int energyLevel, bool hasSharedEnemy, bool hasTarget, bool hasMoved, Example9QL.Location locationType, Stance currentStance, int actionPoints, bool wasTaggedLastTick) Parameters energyLevel int hasSharedEnemy bool hasTarget bool hasMoved bool locationType Example9QL.Location currentStance Stance actionPoints int wasTaggedLastTick bool Fields CurrentStance public Stance CurrentStance Field Value Stance EnergyLevel public int EnergyLevel Field Value int HasMoved public bool HasMoved Field Value bool HasSharedEnemy public bool HasSharedEnemy Field Value bool HasTarget public bool HasTarget Field Value bool LocationType public Example9QL.Location LocationType Field Value Example9QL.Location Properties ActionPoints public int ActionPoints { get; set; } Property Value int WasTaggedLastTick public bool WasTaggedLastTick { get; set; } Property Value bool Methods GetCurrentStance() public int GetCurrentStance() Returns int GetEnergyLevel() public int GetEnergyLevel() Returns int GetHasMoved() public int GetHasMoved() Returns int GetHasSharedEnemy() public int GetHasSharedEnemy() Returns int GetHasTarget() public int GetHasTarget() Returns int GetLocationType() public int GetLocationType() Returns int GetWasTaggedLastTick() public int GetWasTaggedLastTick() Returns int SetHasMoved(bool) public void SetHasMoved(bool newHasMoved) Parameters newHasMoved bool"
  },
  "api/LaserTagBox.Model.Mind.Example9QL.html": {
    "href": "api/LaserTagBox.Model.Mind.Example9QL.html",
    "title": "Class Example9QL | Mars Laser Tag Game",
    "summary": "Class Example9QL Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class Example9QL : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example9QL Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.Example1.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.Example1.html",
    "title": "Class Example1 | Mars Laser Tag Game",
    "summary": "Class Example1 Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class Example1 : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example1 Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.Example10Rule.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.Example10Rule.html",
    "title": "Class Example10Rule | Mars Laser Tag Game",
    "summary": "Class Example10Rule Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class Example10Rule : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example10Rule Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.Example2.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.Example2.html",
    "title": "Class Example2 | Mars Laser Tag Game",
    "summary": "Class Example2 Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class Example2 : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example2 Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.Example3.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.Example3.html",
    "title": "Class Example3 | Mars Laser Tag Game",
    "summary": "Class Example3 Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class Example3 : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example3 Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.Example4.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.Example4.html",
    "title": "Class Example4 | Mars Laser Tag Game",
    "summary": "Class Example4 Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class Example4 : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example4 Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.Example5.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.Example5.html",
    "title": "Class Example5 | Mars Laser Tag Game",
    "summary": "Class Example5 Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class Example5 : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example5 Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Counter public static int Counter Field Value int Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.Example6.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.Example6.html",
    "title": "Class Example6 | Mars Laser Tag Game",
    "summary": "Class Example6 Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class Example6 : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Example6 Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Examples.ShooterCopy.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.ShooterCopy.html",
    "title": "Class ShooterCopy | Mars Laser Tag Game",
    "summary": "Class ShooterCopy Namespace LaserTagBox.Model.Mind.Examples Assembly LaserTagBox.dll public class ShooterCopy : Shooter, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Shooter ShooterCopy Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members Shooter.Init(PlayerMindLayer) Shooter.Tick() AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/LaserTagBox.Model.Mind.Examples.html": {
    "href": "api/LaserTagBox.Model.Mind.Examples.html",
    "title": "Namespace LaserTagBox.Model.Mind.Examples | Mars Laser Tag Game",
    "summary": "Namespace LaserTagBox.Model.Mind.Examples Classes Example1 Example10Rule Example2 Example3 Example4 Example5 Example6 ShooterCopy"
  },
  "api/LaserTagBox.Model.Mind.FlagCollector.html": {
    "href": "api/LaserTagBox.Model.Mind.FlagCollector.html",
    "title": "Class FlagCollector | Mars Laser Tag Game",
    "summary": "Class FlagCollector Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class FlagCollector : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind FlagCollector Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.IdleAgent.html": {
    "href": "api/LaserTagBox.Model.Mind.IdleAgent.html",
    "title": "Class IdleAgent | Mars Laser Tag Game",
    "summary": "Class IdleAgent Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class IdleAgent : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind IdleAgent Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Intel.html": {
    "href": "api/LaserTagBox.Model.Mind.Intel.html",
    "title": "Class Intel | Mars Laser Tag Game",
    "summary": "Class Intel Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class Intel Inheritance object Intel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Intel(int, int) public Intel(int width, int height) Parameters width int height int Methods AddDitches(long, List<Position>) Adds all ditches the agent has explored at the current tick. public bool AddDitches(long curTick, List<Position> ditches) Parameters curTick long the current tick the agent is at ditches List<Position> Returns bool true, if hills were added - false, no ditches found AddEnemies(long, HashSet<EnemySnapshot>) Adds all enemies an agents has explored in the current tick. public bool AddEnemies(long curTick, HashSet<EnemySnapshot> enemies) Parameters curTick long the current tick the agent is at enemies HashSet<EnemySnapshot> explored enemies Returns bool false, if method is called twice or no enemies found, otherwise true AddHills(long, List<Position>) Adds all hills the agent has explored at the current tick. public bool AddHills(long curTick, List<Position> hills) Parameters curTick long the current tick the agent is at hills List<Position> explored hills Returns bool true, if hills were added - false, if no hills found GetDitches() Returns all explored ditches for the current tick. public HashSet<Position> GetDitches() Returns HashSet<Position> list of explored ditches GetEnemies(long) Returns all enemies explored by all members at the current tick. public HashSet<EnemySnapshot> GetEnemies(long curTick) Parameters curTick long the current tick the agent is at Returns HashSet<EnemySnapshot> set of enemies explored GetGoal(Position) public Position GetGoal(Position currentPosition) Parameters currentPosition Position Returns Position GetHills() Returns all explored hills for the current tick. public HashSet<Position> GetHills() Returns HashSet<Position> list of explored hills GetInstance(int, int) public static Intel GetInstance(int width, int height) Parameters width int height int Returns Intel GetLastKnownPosition() Returns the last known position of an enemy. public Position GetLastKnownPosition() Returns Position"
  },
  "api/LaserTagBox.Model.Mind.PlayerMindLayer.html": {
    "href": "api/LaserTagBox.Model.Mind.PlayerMindLayer.html",
    "title": "Class PlayerMindLayer | Mars Laser Tag Game",
    "summary": "Class PlayerMindLayer Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll A layer type that holds the minds of the LaserTag agents. public class PlayerMindLayer : ILayer, IModelObject Inheritance object PlayerMindLayer Implements ILayer IModelObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerMindLayer(PlayerBodyLayer) Constructor of the layer type for receiving and storing the PlayerBodyLayer. public PlayerMindLayer(PlayerBodyLayer playerBodyLayer) Parameters playerBodyLayer PlayerBodyLayer The given instance of the layer type PlayerBodyLayer. Properties Height The height of the grid-based environment. public int Height { get; } Property Value int Width The width of the grid-based environment. public int Width { get; } Property Value int Methods GetCurrentTick() Gets the current tick from the simulation context. public long GetCurrentTick() Returns long InitLayer(LayerInitData, RegisterAgent, UnregisterAgent) Initialization routine of the layer type. Returns true if initialization was successful, otherwise false. public bool InitLayer(LayerInitData layerInitData, RegisterAgent registerAgentHandle = null, UnregisterAgent unregisterAgentHandle = null) Parameters layerInitData LayerInitData External initialization and configuration data for constructing the layer and initializing agents. registerAgentHandle RegisterAgent A handle for registering agents with the simulation. unregisterAgentHandle UnregisterAgent A handle for unregistering agents from the simulation. Returns bool Exceptions NotSupportedException Thrown if this method is called after the layer has already been initialized. SetCurrentTick(long) Sets the current tick of the simulation to the given value. public void SetCurrentTick(long currentStep) Parameters currentStep long The value to which to set the current tick of the simulation"
  },
  "api/LaserTagBox.Model.Mind.QTableManager.html": {
    "href": "api/LaserTagBox.Model.Mind.QTableManager.html",
    "title": "Class QTableManager | Mars Laser Tag Game",
    "summary": "Class QTableManager Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class QTableManager Inheritance object QTableManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetActionIndexByMaxQValue(AgentState) public int GetActionIndexByMaxQValue(AgentState state) Parameters state AgentState Returns int Read() public void Read()"
  },
  "api/LaserTagBox.Model.Mind.SecondFlagCollector.html": {
    "href": "api/LaserTagBox.Model.Mind.SecondFlagCollector.html",
    "title": "Class SecondFlagCollector | Mars Laser Tag Game",
    "summary": "Class SecondFlagCollector Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class SecondFlagCollector : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind SecondFlagCollector Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.Shooter.html": {
    "href": "api/LaserTagBox.Model.Mind.Shooter.html",
    "title": "Class Shooter | Mars Laser Tag Game",
    "summary": "Class Shooter Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class Shooter : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind Shooter Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Derived ShooterCopy Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.YourPlayerMindPleaseRename.html": {
    "href": "api/LaserTagBox.Model.Mind.YourPlayerMindPleaseRename.html",
    "title": "Class YourPlayerMindPleaseRename | Mars Laser Tag Game",
    "summary": "Class YourPlayerMindPleaseRename Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class YourPlayerMindPleaseRename : AbstractPlayerMind, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind YourPlayerMindPleaseRename Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Derived YourPlayerMindPleaseRenameCopy Inherited Members AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Init(PlayerMindLayer) Provides the possibility to initialize the players mind. public override void Init(PlayerMindLayer mindLayer) Parameters mindLayer PlayerMindLayer Can be ignored. Tick() Provides the possibility to act. public override void Tick()"
  },
  "api/LaserTagBox.Model.Mind.YourPlayerMindPleaseRenameCopy.html": {
    "href": "api/LaserTagBox.Model.Mind.YourPlayerMindPleaseRenameCopy.html",
    "title": "Class YourPlayerMindPleaseRenameCopy | Mars Laser Tag Game",
    "summary": "Class YourPlayerMindPleaseRenameCopy Namespace LaserTagBox.Model.Mind Assembly LaserTagBox.dll public class YourPlayerMindPleaseRenameCopy : YourPlayerMindPleaseRename, IAgent<PlayerMindLayer>, IAgent, ITickClient, IEntity, IModelObject Inheritance object AbstractPlayerMind YourPlayerMindPleaseRename YourPlayerMindPleaseRenameCopy Implements IAgent<PlayerMindLayer> IAgent ITickClient IEntity IModelObject Inherited Members YourPlayerMindPleaseRename.Init(PlayerMindLayer) YourPlayerMindPleaseRename.Tick() AbstractPlayerMind.ID AbstractPlayerMind.Body object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/LaserTagBox.Model.Mind.html": {
    "href": "api/LaserTagBox.Model.Mind.html",
    "title": "Namespace LaserTagBox.Model.Mind | Mars Laser Tag Game",
    "summary": "Namespace LaserTagBox.Model.Mind Classes AbstractPlayerMind Create a subclass of AbstractPlayerMind for your own artificial intelligence. AgentState Example7QL A learning agent using Q-Learning and having a state, which consists of multiple components constituted by different physical attributes, like energy and ammunition level. Example8Rule Example9QL Example9QL.State FlagCollector IdleAgent Intel PlayerMindLayer A layer type that holds the minds of the LaserTag agents. QTableManager SecondFlagCollector Shooter YourPlayerMindPleaseRename YourPlayerMindPleaseRenameCopy Enums Example9QL.Action Example9QL.Location"
  },
  "api/LaserTagBox.Model.Shared.Color.html": {
    "href": "api/LaserTagBox.Model.Shared.Color.html",
    "title": "Enum Color | Mars Laser Tag Game",
    "summary": "Enum Color Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll public enum Color Fields Blue = 0 Green = 1 Red = 3 Yellow = 2"
  },
  "api/LaserTagBox.Model.Shared.EnemySnapshot.html": {
    "href": "api/LaserTagBox.Model.Shared.EnemySnapshot.html",
    "title": "Struct EnemySnapshot | Mars Laser Tag Game",
    "summary": "Struct EnemySnapshot Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll Provides information about an explored enemy. public readonly struct EnemySnapshot Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors EnemySnapshot(Guid, int, Color, Stance, Position) public EnemySnapshot(Guid id, int memberId, Color team, Stance stance, Position position) Parameters id Guid memberId int team Color stance Stance position Position Properties Id Identifies the player. public Guid Id { get; } Property Value Guid MemberId Alternative identifier of the player. public int MemberId { get; } Property Value int Position Current position of the agent on the grid. public Position Position { get; } Property Value Position Stance The stance has influence on visibility (explorable by others) and visual range (extend of on exploration). public Stance Stance { get; } Property Value Stance Team Indicates to witch team the agent belongs. public Color Team { get; } Property Value Color"
  },
  "api/LaserTagBox.Model.Shared.FlagSnapshot.html": {
    "href": "api/LaserTagBox.Model.Shared.FlagSnapshot.html",
    "title": "Struct FlagSnapshot | Mars Laser Tag Game",
    "summary": "Struct FlagSnapshot Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll public struct FlagSnapshot Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FlagSnapshot(Guid, Color, Position, bool) public FlagSnapshot(Guid id, Color team, Position position, bool pickedUp) Parameters id Guid team Color position Position pickedUp bool Properties Id Identifies the item. public readonly Guid Id { get; } Property Value Guid PickedUp Indicates whether the item is picked up by an agent. public readonly bool PickedUp { get; } Property Value bool Position Current position of the agent on the grid. public readonly Position Position { get; } Property Value Position Team Indicates to which team the item belongs. public readonly Color Team { get; } Property Value Color"
  },
  "api/LaserTagBox.Model.Shared.FriendSnapshot.html": {
    "href": "api/LaserTagBox.Model.Shared.FriendSnapshot.html",
    "title": "Struct FriendSnapshot | Mars Laser Tag Game",
    "summary": "Struct FriendSnapshot Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll Provides information about other team members. public struct FriendSnapshot Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FriendSnapshot(Guid, int, Color, Stance, Position, int, double, double) public FriendSnapshot(Guid id, int memberId, Color team, Stance stance, Position position, int energy, double visualRange, double visibilityRange) Parameters id Guid memberId int team Color stance Stance position Position energy int visualRange double visibilityRange double Properties Energy Remaining energy of the agent. public readonly int Energy { get; } Property Value int Id Identifies the player. public readonly Guid Id { get; } Property Value Guid MemberId Alternative identifier of the player. public readonly int MemberId { get; } Property Value int Position Current position of the agent on the grid. public readonly Position Position { get; } Property Value Position Stance The stance has influence on visibility (explorable by others) and visual range (extend of on exploration). public readonly Stance Stance { get; } Property Value Stance Team Indicates to witch team the agent belongs. public readonly Color Team { get; } Property Value Color VisibilityRange Provides a metric on how visible the agent is for enemies. public readonly double VisibilityRange { get; } Property Value double VisualRange Provides a metric on the distance for exploring. public readonly double VisualRange { get; } Property Value double"
  },
  "api/LaserTagBox.Model.Shared.GameMode.html": {
    "href": "api/LaserTagBox.Model.Shared.GameMode.html",
    "title": "Enum GameMode | Mars Laser Tag Game",
    "summary": "Enum GameMode Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll public enum GameMode Fields CaptureTheFlag = 1 TeamDeathmatch = 0"
  },
  "api/LaserTagBox.Model.Shared.IPlayerBody.html": {
    "href": "api/LaserTagBox.Model.Shared.IPlayerBody.html",
    "title": "Interface IPlayerBody | Mars Laser Tag Game",
    "summary": "Interface IPlayerBody Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll The IPlayerBody is the interface for any mind/AI to the world of agents. Use it to explore and interact with the battleground. public interface IPlayerBody : IPositionable Properties ActionPoints Remaining actions points of this agent for the current tick. int ActionPoints { get; } Property Value int Alive Indicates if the agent is alive and can therefore act. bool Alive { get; } Property Value bool CarryingFlag Indicates if the agent is carrying the flag of opponent. bool CarryingFlag { get; } Property Value bool Color Indicates to witch team the agent belongs. Color Color { get; } Property Value Color Energy Remaining energy of the agent. int Energy { get; } Property Value int GamePoints Collected game points of the agent with regard to the game mode. int GamePoints { get; } Property Value int Position Current position of the agent on the grid. Position Position { get; } Property Value Position RemainingShots The magazine count of the weapon. How many more tag-attempts can be made before reloading is required. int RemainingShots { get; } Property Value int Stance The stance has influence on visibility (explorable by others) and visual range (extend of on exploration). Stance Stance { get; } Property Value Stance VisibilityRange Provides a metric on how visible the agent is for enemies. double VisibilityRange { get; } Property Value double VisualRange Provides a metric on the distance for exploring. double VisualRange { get; } Property Value double WasTaggedLastTick Indicates if the agent was tagged in the last tick. bool WasTaggedLastTick { get; } Property Value bool Methods ChangeStance2(Stance) Change the current stance of the agent. Costs 2 action points. void ChangeStance2(Stance newStance) Parameters newStance Stance The new stance of the agent. ExploreBarrels1() Explores all ExplosiveBarrel s in sight of the agent. Costs 1 action point. List<Position> ExploreBarrels1() Returns List<Position> ExploreBarriers1() Explores all Barrier s in sight of the agent. Costs 1 action point. List<Position> ExploreBarriers1() Returns List<Position> A list of the barriers positions. ExploreDitches1() Explores all Ditch es in sight of the agent. Costs 1 action point. List<Position> ExploreDitches1() Returns List<Position> A list of the ditches positions. ExploreEnemies1() Explores all enemies in sight of the agent. Costs 1 action point. List<EnemySnapshot> ExploreEnemies1() Returns List<EnemySnapshot> A list of the enemies information. ExploreEnemyFlagStands1() Explores the enemy flag stands. List<Position> ExploreEnemyFlagStands1() Returns List<Position> ExploreExplosiveBarrels1() Explores all explodable ExplosiveBarrel s in sight of the agent. Costs 1 action point. List<Position> ExploreExplosiveBarrels1() Returns List<Position> ExploreFlags2() Explores the flags. List<FlagSnapshot> ExploreFlags2() Returns List<FlagSnapshot> ExploreHills1() Explores all Hill s in sight of the agent. Costs 1 action point. List<Position> ExploreHills1() Returns List<Position> A list of the hills positions. ExploreOwnFlagStand() Explores the position of the own flag stand. Position ExploreOwnFlagStand() Returns Position ExploreTeam() Provides all IPlayerBody s of the same team. List<FriendSnapshot> ExploreTeam() Returns List<FriendSnapshot> A list of the teams player bodies. ExploreWater1() Explores all Water s in sight of the agent. Costs 1 action point. List<Position> ExploreWater1() Returns List<Position> GetDistance(Position) Provides the distance between given position and the agents position. int GetDistance(Position position) Parameters position Position That is tested upon. Returns int The distance in Manhattan calculation. GoTo(Position) Moves towards given position by using a D*-algorithm. The algorithm automatically moves around obstacles. Always moves only one cell a tick. Can therefore only called once a tick for an agent. If the agent is in another stance the moving delays (lying: 3 ticks/cell, kneeling 2 ticks/cell). bool GoTo(Position goal) Parameters goal Position The position that should be reached. Returns bool true if the movement was successful, false otherwise. HasBeeline1(Position) Indicates if there is a connecting line between given position and the agents position without any obstacle in the way. Costs 1 action points. bool HasBeeline1(Position position) Parameters position Position That is tested. Returns bool true if a beeline exists, false otherwise Reload3() Reloads the weapons magazine count to 5 shots. Costs 3 action points. void Reload3() Tag5(Position) Tries to tag an enemy at given position. The success depends on the distance, the enemies and own stance value and a little luck. Costs 5 action points. bool Tag5(Position aimedPosition) Parameters aimedPosition Position The position that is aimed on. Returns bool true if an enemy was tagged, false otherwise or if not enough action points are available"
  },
  "api/LaserTagBox.Model.Shared.Stance.html": {
    "href": "api/LaserTagBox.Model.Shared.Stance.html",
    "title": "Enum Stance | Mars Laser Tag Game",
    "summary": "Enum Stance Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll public enum Stance Fields Kneeling = 1 Lying = 2 Standing = 0"
  },
  "api/LaserTagBox.Model.Shared.TeamScore.html": {
    "href": "api/LaserTagBox.Model.Shared.TeamScore.html",
    "title": "Class TeamScore | Mars Laser Tag Game",
    "summary": "Class TeamScore Namespace LaserTagBox.Model.Shared Assembly LaserTagBox.dll public class TeamScore Inheritance object TeamScore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TeamScore(string, Color, int) public TeamScore(string name, Color color, int gamePoints) Parameters name string color Color gamePoints int Properties Color public Color Color { get; set; } Property Value Color GamePoints public int GamePoints { get; set; } Property Value int Name public string Name { get; set; } Property Value string"
  },
  "api/LaserTagBox.Model.Shared.html": {
    "href": "api/LaserTagBox.Model.Shared.html",
    "title": "Namespace LaserTagBox.Model.Shared | Mars Laser Tag Game",
    "summary": "Namespace LaserTagBox.Model.Shared Classes TeamScore Structs EnemySnapshot Provides information about an explored enemy. FlagSnapshot FriendSnapshot Provides information about other team members. Interfaces IPlayerBody The IPlayerBody is the interface for any mind/AI to the world of agents. Use it to explore and interact with the battleground. Enums Color GameMode Stance"
  },
  "api/LaserTagBox.Model.Spots.Barrier.html": {
    "href": "api/LaserTagBox.Model.Spots.Barrier.html",
    "title": "Class Barrier | Mars Laser Tag Game",
    "summary": "Class Barrier Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll A barrier that acts as an obstacle to agents. public class Barrier : Spot, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot Barrier Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Inherited Members Spot.Battleground Spot.Position Spot.ID Spot.Init(PlayerBodyLayer) Spot.Tick() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/LaserTagBox.Model.Spots.Ditch.html": {
    "href": "api/LaserTagBox.Model.Spots.Ditch.html",
    "title": "Class Ditch | Mars Laser Tag Game",
    "summary": "Class Ditch Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll A ditch that agents can step into. public class Ditch : OccupiableSpot, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot OccupiableSpot Ditch Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Inherited Members OccupiableSpot.Free OccupiableSpot.Init(PlayerBodyLayer) OccupiableSpot.Tick() Spot.Battleground Spot.Position Spot.ID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/LaserTagBox.Model.Spots.ExplosiveBarrel.html": {
    "href": "api/LaserTagBox.Model.Spots.ExplosiveBarrel.html",
    "title": "Class ExplosiveBarrel | Mars Laser Tag Game",
    "summary": "Class ExplosiveBarrel Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll A spot that represents an explosive barrel in the environment. public class ExplosiveBarrel : Spot, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot ExplosiveBarrel Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Inherited Members Spot.Battleground Spot.Position Spot.ID Spot.Init(PlayerBodyLayer) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasExploded Indicates whether the barrel has exploded. public bool HasExploded { get; } Property Value bool Methods Tagged() public void Tagged() Tick() The behavior routine of the object. (This is an abstract object without behavior). public override void Tick()"
  },
  "api/LaserTagBox.Model.Spots.FlagStand.html": {
    "href": "api/LaserTagBox.Model.Spots.FlagStand.html",
    "title": "Class FlagStand | Mars Laser Tag Game",
    "summary": "Class FlagStand Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll public class FlagStand : OccupiableSpot, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot OccupiableSpot FlagStand Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Inherited Members OccupiableSpot.Free OccupiableSpot.Init(PlayerBodyLayer) OccupiableSpot.Tick() Spot.Battleground Spot.Position Spot.ID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color public Color Color { get; set; } Property Value Color"
  },
  "api/LaserTagBox.Model.Spots.Hill.html": {
    "href": "api/LaserTagBox.Model.Spots.Hill.html",
    "title": "Class Hill | Mars Laser Tag Game",
    "summary": "Class Hill Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll A hill that agents can step onto. public class Hill : OccupiableSpot, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot OccupiableSpot Hill Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Inherited Members OccupiableSpot.Free OccupiableSpot.Init(PlayerBodyLayer) OccupiableSpot.Tick() Spot.Battleground Spot.Position Spot.ID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/LaserTagBox.Model.Spots.OccupiableSpot.html": {
    "href": "api/LaserTagBox.Model.Spots.OccupiableSpot.html",
    "title": "Class OccupiableSpot | Mars Laser Tag Game",
    "summary": "Class OccupiableSpot Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll An object of interest (OOI) that can be occupied by agents. public abstract class OccupiableSpot : Spot, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot OccupiableSpot Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Derived Ditch FlagStand Hill Inherited Members Spot.Battleground Spot.Position Spot.ID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Free A flag that tracks the occupation status of the object. True if the object is free, otherwise false. public bool Free { get; set; } Property Value bool Methods Init(PlayerBodyLayer) Initialization routine of the object. public override void Init(PlayerBodyLayer battleground) Parameters battleground PlayerBodyLayer A reference to the environment in which the object is to be situated. Tick() Behavior routine of the object. public override void Tick()"
  },
  "api/LaserTagBox.Model.Spots.Spot.html": {
    "href": "api/LaserTagBox.Model.Spots.Spot.html",
    "title": "Class Spot | Mars Laser Tag Game",
    "summary": "Class Spot Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll An object of interest (OOI) in the environment. public abstract class Spot : IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Derived Barrier ExplosiveBarrel OccupiableSpot Water Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Battleground A reference to the environment in which the object is situated. protected PlayerBodyLayer Battleground { get; } Property Value PlayerBodyLayer ID The unique identifier of the object. public Guid ID { get; set; } Property Value Guid Position The position of the object in the environment. public Position Position { get; set; } Property Value Position Methods Init(PlayerBodyLayer) Initialization routine of the object. public virtual void Init(PlayerBodyLayer battleground) Parameters battleground PlayerBodyLayer A reference to the environment in which the object is to be situated. Tick() The behavior routine of the object. (This is an abstract object without behavior). public virtual void Tick()"
  },
  "api/LaserTagBox.Model.Spots.Water.html": {
    "href": "api/LaserTagBox.Model.Spots.Water.html",
    "title": "Class Water | Mars Laser Tag Game",
    "summary": "Class Water Namespace LaserTagBox.Model.Spots Assembly LaserTagBox.dll A spot that represents a water body in the environment. public class Water : Spot, IAgent<PlayerBodyLayer>, IAgent, ITickClient, IEntity, IModelObject, IPositionable Inheritance object Spot Water Implements IAgent<PlayerBodyLayer> IAgent ITickClient IEntity IModelObject IPositionable Inherited Members Spot.Battleground Spot.Position Spot.ID Spot.Init(PlayerBodyLayer) Spot.Tick() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/LaserTagBox.Model.Spots.html": {
    "href": "api/LaserTagBox.Model.Spots.html",
    "title": "Namespace LaserTagBox.Model.Spots | Mars Laser Tag Game",
    "summary": "Namespace LaserTagBox.Model.Spots Classes Barrier A barrier that acts as an obstacle to agents. Ditch A ditch that agents can step into. ExplosiveBarrel A spot that represents an explosive barrel in the environment. FlagStand Hill A hill that agents can step onto. OccupiableSpot An object of interest (OOI) that can be occupied by agents. Spot An object of interest (OOI) in the environment. Water A spot that represents a water body in the environment."
  },
  "api/LaserTagBox.Model.html": {
    "href": "api/LaserTagBox.Model.html",
    "title": "Namespace LaserTagBox.Model | Mars Laser Tag Game",
    "summary": "Namespace LaserTagBox.Model Classes Commons"
  },
  "articles/agent-methods.html": {
    "href": "articles/agent-methods.html",
    "title": "Agent Methods | Mars Laser Tag Game",
    "summary": "Agent Methods This section describes the methods provided by the IPlayerBody interface. The digit at the end of each method name indicates the number of ActionPoints (AP) required to execute it. Methods without a digit require 0 AP. Note If the agent does not have enough ActionPoints, the method usually returns false or null. Movement Methods ChangeStance2(Stance) AP Cost: 2 Returns: void Changes the agent's stance to Standing, Kneeling, or Lying. Stance affects movement speed, VisualRange, and VisibilityRange. GoTo(Position) : bool AP Cost: 0 Returns: true if move executed, false otherwise Pathfinding and movement method. Moves the agent one step toward a specified (x, y) destination. If called again with a different position, the path is re-planned. Note Returns false if the target is unreachable or outside the map. Exploration Methods Note All exploration methods fail (return null or false) if the agent does not have enough ActionPoints. By default, exploration methods cost 1 ActionPoint, unless stated otherwise. ExploreBarriers1() : List<Position> – Detect visible Barrier tiles ExploreDitches1() : List<Position> – Detect visible Ditch tiles ExploreHills1() : List<Position> – Detect visible Hill tiles ExploreEnemies1() : List<EnemySnapshot> – Detect visible opponents ExploreTeam() : List<IPlayerBody> – Detect teammates ExploreWater1() : List<Position> – Detect visible Water tiles ExploreBarrels1() : List<Position> – All visible ExplosiveBarrel tiles ExploreExplosiveBarrels1() : List<Position> – Only unexploded barrels ExploreEnemyFlagStands1() : List<Position> – Detect your opponent’s flag stand ExploreFlags2() : List<FlagSnapshot> – All visible flags (costs 2 AP) ExploreOwnFlagStand() : Position – Detect your team’s flag stand GetDistance(Position) : int AP Cost: 0 Returns: Number of grid cells (or -1 if not visible) Computes shortest distance to a position, if it's visible to the agent. HasBeeline1(Position) : bool AP Cost: 1 Checks for unobstructed line-of-sight to a grid position. Note Returns false if vision is blocked or if insufficient AP. Tagging Methods Reload3() AP Cost: 3 Returns: void Reloads the tagging weapon, restoring RemainingShots to 5. Must be used when RemainingShots == 0. Tag5(Position) AP Cost: 5 Returns: true if a tag or explosion was successful, false otherwise Fires a shot at the specified grid cell. The action can result in: Triggering an explosion if an unexploded ExplosiveBarrel is present. Attempting to tag an enemy agent using a probabilistic hit calculation. Conditions for Execution The method will immediately fail and return false if: The caller has less than 5 ActionPoints The caller has no RemainingShots There is no line of sight (!HasBeeline) to the aimedPosition The target is a friendly agent Tagging Logic If the above checks pass and an enemy is present at the aimedPosition, the following probabilistic model determines if the tag is successful: Random.Next(10) + targetStanceValue + targetTerrainValue > ownStanceThreshold targetStanceValue: Standing → 2 Kneeling → 1 Lying → 0 targetTerrainValue (based on field type): Normal ground → 1 Ditch → 0 Hill → 2 ownStanceThreshold: Standing → 8 Kneeling → 6 Lying → 4 This means: a tag is more likely when the attacker is in a low stance (e.g. Lying), and the defender is more exposed (e.g. Standing on a Hill). If the hit succeeds: The enemy's Energy is reduced by 10 The caller gains 10 GamePoints If the tag causes the enemy’s Energy to drop to 0 or less, the caller gains an additional 10 GamePoints Team Mode Dependency Important GamePoints are only awarded in Team Deathmatch mode. In Capture the Flag mode, tags affect gameplay but do not yield points. Special Case: Explosive Barrel If the targeted cell contains a live ExplosiveBarrel: The barrel explodes immediately Explosion affects all agents in a 3-tile radius Returns true regardless of whether an enemy is present Side Effects Reduces RemainingShots by 1 if fired Friendly agents are never tagged"
  },
  "articles/agent-properties.html": {
    "href": "articles/agent-properties.html",
    "title": "Agent Properties | Mars Laser Tag Game",
    "summary": "Agent Properties The IPlayerBody interface contains a set of properties and methods that define an agent's capabilities. Agents can access these by inheriting from AbstractAgentMind. Properties Below are the key properties of the IPlayerBody interface, grouped by category. General Properties ActionPoints The number of points available to perform actions during the current tick. Each action costs a specific number of ActionPoints. Reset to 10 at the end of each tick. Color The team color of the agent. Energy The agent's health. Maximum is 100. It decreases when the agent is tagged. If it reaches 0, the agent is removed from the simulation. GamePoints Score that tracks an agent’s performance. Its usage depends on the selected game mode: In Team Deathmatch: Tagging an opponent: +10 points Eliminating an opponent (enemy energy ≤ 0): +10 bonus points Being eliminated: –10 points In Capture the Flag: No points are awarded for tagging or eliminating. +1 point is awarded only when a team successfully captures the enemy flag and returns it to their own flag stand. CarryingFlag Indicates if the agent is currently carrying an enemy flag (only relevant in Capture the Flag mode). Movement Properties Position The current (x, y) coordinates of the agent on the map. Stance Enum value describing posture: Standing, Kneeling, or Lying. Affects movement speed, VisualRange, and VisibilityRange. Exploration Properties VisualRange Number of visible grid cells, based on Stance: Standing → 10 Kneeling → 8 Lying → 5 VisibilityRange Distance at which the agent can be seen by others, based on Stance: Standing → 10 Kneeling → 8 Lying → 5 Tagging Properties RemainingShots Current number of available shots. If 0, the agent must call Reload() to shoot again. WasTaggedLastTick true if the agent was tagged in the previous tick; otherwise false. If you need help with the corresponding methods for these properties, see the Agent Methods section."
  },
  "articles/environment.html": {
    "href": "articles/environment.html",
    "title": "| Mars Laser Tag Game",
    "summary": "The Environment The default environment is a 50×50 grid. To simulate indoor laser tag conditions, the map is enclosed with barriers. Structures like barriers, rooms, hills, and ditches add complexity and enable interaction via exploration methods. Structures Agents can interact with these environment elements by calling the appropriate Explore* methods (excluding ExploreTeam and ExploreEnemies1). Each exploration costs 1 ActionPoint. Structure class hierarchy Barrier Cannot be occupied. Blocks movement and vision. Explored using ExploreBarrier1. Hill Can be occupied. Increases both VisualRange and Visibility. Also increases chance of being tagged. Explored using ExploreHill1. Ditch Can be occupied. Decreases both VisualRange and Visibility. Decreases chance of being tagged. Explored using ExploreDitch1. Room Enclosed by barriers with small gaps for entry/exit. Functions as clustered tactical zones. Water Cannot be occupied. Blocks movement but not vision. Explored using ExploreWater1. ExplosiveBarrel Destructible, not occupiable. Does not block vision. Explodes when tagged, damaging agents in a radius of 3 tiles. Explored using ExploreBarrels1 or ExploreExplosiveBarrels1. FlagStand Can be occupied. Holds the team's flag at game start. In Capture the Flag mode: Used to score captures. Explored using ExploreEnemyFlagStands1 or ExploreOwnFlagStand. Items Flag Belongs to a specific team. Starts on its team’s FlagStand. Automatically picked up by opposing agents. Returned instantly when touched by the owning team. Designing Your Own Maps You can create custom environments using a CSV file. Shape: rectangular (n × m) or square (n × n) Separator: semicolon ; Encoding: 0 → empty cell 1 → Barrier 2 → Hill 3 → Ditch 4 → Water 5 → ExplosiveBarrel 7 → FlagStand (red team) 8 → FlagStand (yellow team) For examples, check the default maps in: LaserTagBox/Resources/"
  },
  "articles/game-objective.html": {
    "href": "articles/game-objective.html",
    "title": "| Mars Laser Tag Game",
    "summary": "Game Modes The game can be played in two different modes: Team Deathmatch and Capture the Flag. Team Deathmatch In this mode, three or four teams compete against each other. Each team consists of three agents that share the same behavior logic. Each agent has an energy level, which decreases when the agent is tagged by an enemy agent. The first team to deplete the energy levels of all enemy agents wins the game. Capture the Flag This mode features two teams, each with their own base and a team flag located at a flag stand. The goal is to capture the enemy team’s flag and bring it back to their own flag stand, while simultaneously preventing the enemy from stealing your own flag. A point is awarded each time a team successfully returns the enemy flag to its base. The match ends after a fixed number of ticks. Unlike in Team Deathmatch, agents respawn at their base when their energy is depleted, allowing continuous play throughout the match duration."
  },
  "articles/game_mechanics.html": {
    "href": "articles/game_mechanics.html",
    "title": "Game Mechanics | Mars Laser Tag Game",
    "summary": "Game Mechanics This section outlines the core rules and systems that define how agents perceive, move, and interact in the LaserTag simulation. Understanding these mechanics is crucial to developing effective strategies. Enemy Vision Agent visibility is determined using ExploreEnemies1(), which consumes 1 ActionPoint and returns a list of visible opponents. The method processes visibility in a strict step-by-step sequence: Step 1: Is the Target Within Visual Range? Before anything else, the target must be within the calling agent’s VisualRange. If the target lies outside this range, no further checks are made. public double VisualRange => VisualRangePenalty + Stance switch { Standing => 10, Kneeling => 8, Lying => 5 }; VisualRange Modifiers private double VisualRangePenalty => CurrentSpot switch { null => 0, Hill _ => 3, Ditch _ => -3, _ => 0 }; Standing on a Hill: +3 range bonus Inside a Ditch: -3 range penalty Flat terrain: no change Only if the enemy lies within this effective VisualRange, the agent proceeds with further visibility checks. Step 2: Team Check Only agents from opposing teams are considered visible. Friendly agents are ignored even if all other conditions are met. Step 3: Beeline (Line-of-Sight) The agent must have an unobstructed straight line to the target without any vision-blocking structures (e.g. Barriers, Hills). This is verified using HasBeeline(enemy), which uses Bresenham’s Line Algorithm to trace the path. Step 4: Visibility Check The enemy must be visible according to: Battleground.GetIntValue(Position) is 2 or 3 || enemy.VisibilityRange >= GetDistance(enemy.Position); This means: If the caller is on a Hill or in a Ditch (GetIntValue == 2 or 3), visibility is automatically granted. Otherwise, the enemy’s VisibilityRange must be greater than or equal to the actual distance. How VisibilityRange is Calculated Each agent has a dynamic visibility value depending on their stance and a possible penalty: public double VisibilityRange => VisibilityRangePenalty + Stance switch { Standing => 10, Kneeling => 8, Lying => 5 }; Standing: 10 units visibility Kneeling: 8 units visibility Lying: 5 units visibility VisibilityRangePenalty: a dynamic modifier that reduces visibility due to the environment effects. Terrain Effects on Visibility The VisibilityRange is affected by the terrain the agent is currently occupying via a penalty or bonus: private double VisibilityRangePenalty => CurrentSpot switch { null => 0, Hill _ => 3, Ditch _ => -3, _ => 0 }; Hill: adds +3 to VisibilityRange (more exposed) Ditch: subtracts 3 from VisibilityRange (better cover) Flat ground or unknown: no modifier This means: Agents on Hills are easier to spot. Agents in Ditches are harder to spot. Movement Agents navigate the map using a modified D* Lite Algorithm, which plans efficient routes and adapts when new obstacles appear. Movement is affected by stance, introducing a delay per action: Standing → no delay (fastest) Kneeling → 2-tick delay Lying → 3-tick delay Delays are tracked using an internal MovementDelayCounter, which resets when a new goal is selected or the stance changes. Tip Use Standing for fast mobility, and Lying for stealth or accuracy — depending on your tactical needs. Tagging Tagging simulates laser interactions and is implemented probabilistically in Tag5(Position). Refer to the Tag5(Position) method for full technical details. Tagging success is influenced by: Attacker’s Stance (X) Lying → highest accuracy Standing → lowest accuracy Target’s Stance (Y) Standing → easiest to tag Lying → hardest to tag Target Terrain On Hill: Y becomes easier to tag due to exposure In Ditch: Y becomes harder to tag due to cover Randomness Even ideal conditions don’t guarantee a hit — randomness ensures unpredictability."
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | Mars Laser Tag Game",
    "summary": "Getting Started For setup and installation instructions, please refer to the README of the main repository."
  },
  "articles/rules.html": {
    "href": "articles/rules.html",
    "title": "| Mars Laser Tag Game",
    "summary": "Rules Game Logic Below is a list of some of the most important parts of the game's logic: If an agent's Energy is equal to or below 0, then the agent is taken out of the environment and does not respawn for the rest of the game. The agent's points, however, are maintained and added to the cumulative score of the team at the end of the match. An agent's Energy regenerates over time. At the end of each tick, an agent's Energy is increased by 1. In Capture the Flag mode, agents respawn at their own team's flag stand after a short delay when their energy reaches zero. Constraints for Developers To ensure the game functions as intended, follow these implementation rules: Only interact with the interface IPlayerBody to access the agent's physical representation. When interacting with the PlayerMindLayer, only invoke the GetCurrentTick() method. Other calls are not allowed. Your agent's constructor must be empty. Loops that are known not to terminate (e.g., while(true)) are not allowed. PropertyDescription tags for loading external info into agents are not allowed. Only learned behavior is permitted as external data."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Mars Laser Tag Game",
    "summary": "LaserTag is an agent-based simulation game inspired by the real-world recreational shooting sport known as laser tag. The game is developed with the Multi-Agent Research and Simulation (MARS) Framework, which is written in C# and runs on .NET. Users of LaserTag can implement their own agents with customized behavioral logic by using the provided agent interface. The interface provides properties and methods which enable agent movement, agent state management, agent-agent and agent-environment interactions, and other functions. This documentation consists of two main sections: Docs It covers everything from gameplay concepts and simulation structure to agent behavior. Use this section to understand: The game objectives and setup The simulation environment and logic How agents interact with each other and the world Design decisions and visualizations API Reference The API section contains detailed technical information about the codebase, including: All available classes, interfaces, and methods Agent interaction mechanisms Data structures used in the simulation This part is generated directly from the source code using DocFX and is ideal for developers implementing or extending agents."
  }
}