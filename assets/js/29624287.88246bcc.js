"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8397],{90035:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tutorial/development/spawning","title":"Spawning and Removing Agents and Entities","description":"To create instances of agent types and registering them at the runtime system to process the Tick(), two concepts are available:","source":"@site/docs/tutorial/development/spawning.md","sourceDirName":"tutorial/development","slug":"/tutorial/development/spawning","permalink":"/docs/tutorial/development/spawning","draft":false,"unlisted":false,"editUrl":"https://github.com/MARS-Group-HAW/MARS-Group-HAW.github.io/edit/main/docs/tutorial/development/spawning.md","tags":[],"version":"current","sidebarPosition":50,"frontMatter":{"sidebar_position":50},"sidebar":"tutorialSidebar","previous":{"title":"Layers","permalink":"/docs/tutorial/development/layers"},"next":{"title":"Environments","permalink":"/docs/tutorial/development/environments/"}}');var s=t(74848),r=t(28453);const a={sidebar_position:50},o="Spawning and Removing Agents and Entities",c={},d=[{value:"Creating and Registering single object using <code>RegisterAgent</code>",id:"creating-and-registering-single-object-using-registeragent",level:2},{value:"Mass Generation using <code>AgentManager</code>",id:"mass-generation-using-agentmanager",level:2},{value:"Removing and unregister an object from simulation",id:"removing-and-unregister-an-object-from-simulation",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spawning-and-removing-agents-and-entities",children:"Spawning and Removing Agents and Entities"})}),"\n",(0,s.jsxs)(n.p,{children:["To ",(0,s.jsx)(n.strong,{children:"create"})," instances of agent types and ",(0,s.jsx)(n.strong,{children:"registering"})," them at the runtime system to process the ",(0,s.jsx)(n.code,{children:"Tick()"}),", two concepts are available:"]}),"\n",(0,s.jsxs)(n.h2,{id:"creating-and-registering-single-object-using-registeragent",children:["Creating and Registering single object using ",(0,s.jsx)(n.code,{children:"RegisterAgent"})]}),"\n",(0,s.jsxs)(n.p,{children:["Individual instances can be instantiated directly using ",(0,s.jsx)(n.code,{children:"new"})," constructor expression. The instance must be registered with the runtime system by calling the ",(0,s.jsx)(n.code,{children:"RegisterAgent"})," handle given through the ",(0,s.jsx)(n.code,{children:"InitLayer"})," method of the ",(0,s.jsx)(n.code,{children:"ILayer"})," implementation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public bool InitLayer(TInitData layerInitData, \n    RegisterAgent registerAgentHandle, UnregisterAgent unregisterAgentHandle) \n{\n\tvar layer = this;\n\tvar agent = new MyAgentType();\n\n\tregisterAgent(layer, agent);\n\treturn true;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Optionally the ",(0,s.jsx)(n.code,{children:"RegisterAgent"})," handle allows to set and override the execution frequency (for more see ",(0,s.jsx)(n.a,{href:"/docs/tutorial/configuration/execution",children:"here"}),") to specify ",(0,s.jsx)(n.strong,{children:"after how many ticks"})," the agent should be called again. Otherwise the registry uses the settings from the simulation configuration ",(0,s.jsx)(n.code,{children:"config.json"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If an output has been specified using ",(0,s.jsx)(n.code,{children:"output"}),", the object is managed accordingly in the output as well automatically."]}),"\n",(0,s.jsxs)(n.h2,{id:"mass-generation-using-agentmanager",children:["Mass Generation using ",(0,s.jsx)(n.code,{children:"AgentManager"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AgentManager"})," is a service component that can be used to initialize agent quantities from the input."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AgentManager"})," is a static class that can be referenced directly and offers two methods:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CreateAgents<Type>"}),": This method creates a set of agents of the specified type but does not register them, so that their ",(0,s.jsx)(n.code,{children:"Tick()"})," methods are called and their versions are managed in the output."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"SpawnAgents<Type>"}),": This method creates ",(0,s.jsx)(n.strong,{children:"and"})," registers the set of agents of the specified type."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Spawning of agents is usually done within the ",(0,s.jsx)(n.code,{children:"InitLayer"})," method of an ",(0,s.jsx)(n.code,{children:"ILayer"})," implementation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public bool InitLayer(\n\tTInitData layerInitData,\n\tRegisterAgent registerAgentHandle, \n\tUnregisterAgent unregisterAgentHandle) \n{\n\tvar layer = this;\n\n\tAgentManager.SpawnAgents<MyOtherAgent>(\n\t\tlayerInitData.AgentInitConfigs.First(config => config.Name == "MyOtherAgent"), \n\t\tregisterAgentHandle, unregisterAgentHandle, \n\t\tnew List<ILayer> {layer});\n\n\treturn true;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Since the agent interacts with the system via its layer, it is necessary that the ",(0,s.jsx)(n.code,{children:"AgentManager"})," is given its own layer instance as ",(0,s.jsx)(n.strong,{children:"dependency"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In the agent this dependent layer can be referenced as a property which is resolved by the system via ",(0,s.jsx)(n.code,{children:"PropertyInjection"}),", for example as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class MyAgentType : AbstractAgent \n{\n\t[PropertyDescription]\n\tpublic MyLayerType Layer { get; set; }\n\n\tpublic void override Tick() {\n\t\t// access your layer here (e.g., Layer.Environment.Explore(...))\n\t}\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, dependent layer can be defined directly as ",(0,s.jsx)(n.strong,{children:"constructor parameter"})," as showed below:"]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["Because of the ",(0,s.jsx)(n.strong,{children:"testing"})," of your own model, it is recommended to keep the required constructor parameters as low as possible."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class MyAgentType : AbstractAgent \n{\n\tpublic MyLayerType Layer { get; set; }\n\n\tpublic MyAgentType(MyLayerType layer) \n\t{\n\t\tLayer = layer;\n\t}\n\n\tpublic void override Tick() {\n\t\t// access your layer here (e.g., Layer.Environment.Explore(...))\n\t}\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"removing-and-unregister-an-object-from-simulation",children:"Removing and unregister an object from simulation"})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);