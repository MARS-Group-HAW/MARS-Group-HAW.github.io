"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4310],{41468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tutorial/soh/getting-started","title":"Quick Start","description":"This getting started describes the steps to download the model, which necessary dependencies have to be installed and how a concrete model is started.","source":"@site/docs/tutorial/soh/getting-started.md","sourceDirName":"tutorial/soh","slug":"/tutorial/soh/getting-started","permalink":"/docs/tutorial/soh/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/MARS-Group-HAW/MARS-Group-HAW.github.io/edit/main/docs/tutorial/soh/getting-started.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"SmartOpenHamburg","permalink":"/docs/tutorial/soh/"},"next":{"title":"Agents","permalink":"/docs/tutorial/soh/agents/"}}');var i=n(74848),o=n(28453);const s={sidebar_position:1},a="Quick Start",d={},l=[{value:"Installation",id:"installation",level:2},{value:"Contents",id:"contents",level:2},{value:"Setup your Environment",id:"setup-your-environment",level:2},{value:"Development Environment",id:"development-environment",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,i.jsxs)(t.p,{children:["This ",(0,i.jsx)(t.strong,{children:"getting started"})," describes the steps to download the model, which necessary dependencies have to be installed and how a concrete model is started."]}),"\n",(0,i.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://www.nuget.org/packages/Mars.Life.SOH/",children:(0,i.jsx)(t.img,{src:"https://img.shields.io/nuget/v/Mars.Life.SOH?label=Mars.Life.SOH",alt:""})})}),"\n",(0,i.jsxs)(t.p,{children:["The SmartOpenHamburg features of MARS are provided in a separate NuGet Package: ",(0,i.jsx)(t.a,{href:"https://www.nuget.org/packages/Mars.Life.SOH/",children:(0,i.jsx)(t.code,{children:"Mars.Life.SOH"})})]}),"\n",(0,i.jsx)(t.h2,{id:"contents",children:"Contents"}),"\n",(0,i.jsx)(t.p,{children:"The repository contains projects and a number of libraries to simulate mobility behavior in cities."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"SOHModelStarter"}),": a model that is geared towards determining optimal routes using several modes of travel (modalities). Per default, the model is set in the district of Altona, Hamburg to run for 24 simulation hours with one agent (type ",(0,i.jsx)(t.code,{children:"Citizen"}),") who is able to travel by walking on foot, riding a bicycle, and driving a car. The agent has a predefined daily routine which includes activities like work, errands, and others."]}),"\n",(0,i.jsx)(t.h2,{id:"setup-your-environment",children:"Setup your Environment"}),"\n",(0,i.jsxs)(t.p,{children:["First clone the repo from our internal ",(0,i.jsx)(t.a,{href:"https://git.haw-hamburg.de",children:"Git"})," with your credentials:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git clone https://git.haw-hamburg.de/mars/model-smart-open-hamburg-po.git\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Download and install the SDK for NetCore 3.1 from the official ",(0,i.jsx)(t.a,{href:"https://dotnet.microsoft.com/download/dotnet-core/3.1",children:"website"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Navigate into the cloned directory and make sure that all required dependencies are installed automatically by building the model in the directory where the ",(0,i.jsx)(t.code,{children:"SOHModel.sln"})," file is located:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"dotnet build\n"})}),"\n",(0,i.jsx)(t.p,{children:"We have prepared a scenario in the project SOHModelStarter for the entry with 10000 agents that you can start immediately. To be able to analyze results afterwards, we recommend the use of a relational database for queries via SQL. Other formats are also possible. We have set a local SQlite as default for you. For other output settings, please refer to the [Online Documentation]."}),"\n",(0,i.jsx)(t.p,{children:"Navigate to the folder and start the model:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"cd SOHModelStarter\ndotnet run\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The results of the model are stored after each simulated second for each agent involved. A new SQLite database with the file name ",(0,i.jsx)(t.em,{children:"+mars.sqlite"}),"* was created in the folder ",(0,i.jsx)(t.strong,{children:"bin/Debug/netcoreapp3.1"})," where all data is stored."]}),"\n",(0,i.jsxs)(t.p,{children:["Use your preferred tool for query or visualization. We recommend the tool ",(0,i.jsx)(t.a,{href:"https://github.com/plotly/falcon",children:"Falcon SQL"})," with which you can analyze relational queries in different ways with diagrams."]}),"\n",(0,i.jsx)(t.h2,{id:"development-environment",children:"Development Environment"}),"\n",(0,i.jsxs)(t.p,{children:["For own development open the ",(0,i.jsx)(t.code,{children:"SOHModel.sln"})," file with ",(0,i.jsx)(t.a,{href:"https://visualstudio.microsoft.com/de/vs/",children:"Visual Studio"}),", ",(0,i.jsx)(t.a,{href:"https://www.jetbrains.com/de-de/rider/",children:"Jetbrains Rider"})," or another IDE supporting C# development."]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(96540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);