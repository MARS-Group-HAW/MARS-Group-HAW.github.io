"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3350],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,y=c["".concat(d,".").concat(u)]||c[u]||m[u]||i;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:5},o="ModelDescription",l={unversionedId:"tutorial/development/model",id:"tutorial/development/model",title:"ModelDescription",description:"Model Definition",source:"@site/docs/tutorial/development/model.md",sourceDirName:"tutorial/development",slug:"/tutorial/development/model",permalink:"/docs/tutorial/development/model",draft:!1,editUrl:"https://github.com/daniel260/theraflow-doc/edit/main/docs/tutorial/development/model.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Creating a model",permalink:"/docs/tutorial/development/createing-a-model"},next:{title:"Agent",permalink:"/docs/tutorial/development/agent"}},d={},p=[{value:"Model Definition",id:"model-definition",level:2},{value:"Registration",id:"registration",level:3},{value:"Registration with Names",id:"registration-with-names",level:2}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modeldescription"},(0,a.kt)("inlineCode",{parentName:"h1"},"ModelDescription")),(0,a.kt)("h2",{id:"model-definition"},"Model Definition"),(0,a.kt)("p",null,"In order to use a model, entities, agents and layer types must be made known to the system."),(0,a.kt)("p",null,"A so-called ",(0,a.kt)("inlineCode",{parentName:"p"},"ModelDescription")," is defined in the project (for example in the entry point ",(0,a.kt)("inlineCode",{parentName:"p"},"Main()"),") and all relevant types are registered."),(0,a.kt)("h3",{id:"registration"},"Registration"),(0,a.kt)("p",null,"First, the ",(0,a.kt)("inlineCode",{parentName:"p"},"using")," import of the namespace must be added:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},"using Mars.Core.Model.Entities;\n")),(0,a.kt)("p",null,"In the program code (for example the entry point ",(0,a.kt)("inlineCode",{parentName:"p"},"Main()")," of the .NetCore application) a ",(0,a.kt)("inlineCode",{parentName:"p"},"ModelDescription")," object must be defined. This object contains all types that occur in the model and that can be parameterized externally by a ",(0,a.kt)("inlineCode",{parentName:"p"},"SimulationConfig"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},"\npublic static void Main() \n{\n    var description = new ModelDescription();\n    \n    description.AddLayer<MyLayer>();\n    description.AddAgent<MyAgent,MyLayer>();\n \n}\n")),(0,a.kt)("p",null,"The types registered above include the self-defined agent type ",(0,a.kt)("inlineCode",{parentName:"p"},"MyAgent")," and the corresponding agent layer ",(0,a.kt)("inlineCode",{parentName:"p"},"MyLayer"),". If you want to use additional data in the model, you have to register the respective data layers additionally:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},"description.AddLayer<MyVectorLayer>();\ndescription.AddLayer<MyRasterLayer>();\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ue10f"," ",(0,a.kt)("inlineCode",{parentName:"p"},"MyLayer")," can also be used as a data layer like ",(0,a.kt)("inlineCode",{parentName:"p"},"MyVectorLayer")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"MyRasterLayer"),". The layer implements the required contract (see ","[here]"," (layers.md)).")),(0,a.kt)("h2",{id:"registration-with-names"},"Registration with Names"),(0,a.kt)("p",null,"By default, the defined class name (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"MyAgent"),") is used as the name within the model. Alternative names can be given during registration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c#"},'description.AddAgent<MyAgent,MyLayer>("myAlternativeAgentName");\n')),(0,a.kt)("p",null,"This allows the types to be mapped using a different name within the configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "agents": [\n    {"name": "myAlternativeAgentName", "file": "anyInput.csv"}\n  ]\n}\n')))}c.isMDXComponent=!0}}]);