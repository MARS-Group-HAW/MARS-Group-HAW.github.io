"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6306],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},14779:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const a={sidebar_position:5,sidebar_label:"Your first model"},l="Your first model",i={unversionedId:"tutorial/mars-basics/first-model",id:"tutorial/mars-basics/first-model",title:"Your first model",description:"After reading about the concepts in the previous chapter you are now ready to build and set up a first model yourself!",source:"@site/docs/tutorial/mars-basics/first-model.md",sourceDirName:"tutorial/mars-basics",slug:"/tutorial/mars-basics/first-model",permalink:"/docs/tutorial/mars-basics/first-model",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/mars-basics/first-model.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Your first model"},sidebar:"tutorialSidebar",previous:{title:"Concepts",permalink:"/docs/tutorial/mars-basics/"},next:{title:"Configuration",permalink:"/docs/tutorial/mars-basics/configuration"}},s={},u=[{value:"Setup",id:"setup",level:2},{value:"Running",id:"running",level:2}],p={toc:u};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"your-first-model"},"Your first model"),(0,o.kt)("p",null,"After reading about the concepts in the previous chapter you are now ready to build and set up a first model yourself!"),(0,o.kt)("p",null,"You can either choose on of the blueprint start models, or go with the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/MARS-Group-HAW/model-wolf-sheep"},"Wolf-Sheep-Model"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For grid based models: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/MARS-Group-HAW/blueprint-grid"},"blueprint-grid")),(0,o.kt)("li",{parentName:"ul"},"For Geo-referenced, with free movement ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/MARS-Group-HAW/blueprint-georaster"},"blueprint-georaster")),(0,o.kt)("li",{parentName:"ul"},"For Geo-referenced, with a graph: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/MARS-Group-HAW/blueprint-geovector"},"blueprint-geovector"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Create a model from scratch"),(0,o.kt)("p",null,"On how to create a new model from scratch, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/tutorial/development/createing-a-model"},"this article"),".")),(0,o.kt)("p",null,"In the following sections we will explain the basic interactions with the model based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"blueprint-grid")," model. Nevertheless, the ideas should be transferable to all suggested model. Also, we will explain the expected behaviors when running the model with the JetBrains Rider IDE."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"blueprint-grid")," is a small model, wherein a few agents walk on a two-dimensional grid."),(0,o.kt)("p",null,"The model consists of the following agent types and layer types:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SimpleAgent"),": an agent that can move randomly."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ComplexAgent"),": an agent that can move in different ways (randomly, bearing-based, goal-oriented), plan trips, and interact with ",(0,o.kt)("inlineCode",{parentName:"li"},"SimpleAgent")," instances."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"GridLayer"),": the layer on which the agents live and move.")),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Please clone your desired repository from GitHub:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/MARS-Group-HAW/blueprint-grid.git\n")),(0,o.kt)("p",null,"After opening the folder of the model, you will see a folder structure similar to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Folder strcuture of a MARS model"',title:'"Folder',strcuture:!0,of:!0,a:!0,MARS:!0,'model"':!0},".\n\u251c\u2500\u2500 <model>\n\u2502\xa0\xa0 \u251c\u2500\u2500 <model>.csproj\n\u2502\xa0\xa0 \u251c\u2500\u2500 Model           # C# files for Layers and Agents\n\u2502\xa0\xa0 \u251c\u2500\u2500 Program.cs      # Entry file for model execution, like main()\n\u2502\xa0\xa0 \u251c\u2500\u2500 Resources       # Assest like input CSVs or geo data\n\u2502\xa0\xa0 \u2514\u2500\u2500 config.json     # Model configuration parameters\n\u251c\u2500\u2500 <model>.sln\n\u2514\u2500\u2500 README.md\n")),(0,o.kt)("h2",{id:"running"},"Running"),(0,o.kt)("p",null,"Open the ",(0,o.kt)("inlineCode",{parentName:"p"},".sln"),"-file with a double click into Rider. In the upper left you shoule see the Green-Play icon to build and run your model."),(0,o.kt)("p",null,"After running the model additional folders will be created: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"<model>bin/Debug/net6.0/"),": contains compiled model, as well as ",(0,o.kt)("strong",{parentName:"li"},"outputs like CSV"),", etc.")))}d.isMDXComponent=!0}}]);