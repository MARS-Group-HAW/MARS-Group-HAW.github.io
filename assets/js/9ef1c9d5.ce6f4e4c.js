"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6811],{76152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tutorial/configuration/sim_output_formats","title":"Simulation Output Formats","description":"Describes the different formats in which simulation output data can be stored","source":"@site/docs/tutorial/configuration/sim_output_formats.md","sourceDirName":"tutorial/configuration","slug":"/tutorial/configuration/sim_output_formats","permalink":"/docs/tutorial/configuration/sim_output_formats","draft":false,"unlisted":false,"editUrl":"https://github.com/MARS-Group-HAW/MARS-Group-HAW.github.io/edit/main/docs/tutorial/configuration/sim_output_formats.md","tags":[],"version":"current","sidebarPosition":60,"frontMatter":{"sidebar_position":60,"description":"Describes the different formats in which simulation output data can be stored"},"sidebar":"tutorialSidebar","previous":{"title":"Layer Configuration","permalink":"/docs/tutorial/configuration/layer_config"},"next":{"title":"Output Filter","permalink":"/docs/tutorial/configuration/output_filter"}}');var i=n(74848),r=n(28453);const a={sidebar_position:60,description:"Describes the different formats in which simulation output data can be stored"},o="Simulation Output Formats",d={},c=[{value:"CSV (Comma Separated File)",id:"csv-comma-separated-file",level:2},{value:"Relational database",id:"relational-database",level:2},{value:"PostgreSQL (PostGIS)",id:"postgresql-postgis",level:3},{value:"SQLite",id:"sqlite",level:3},{value:"Real-time WebSocket",id:"real-time-websocket",level:2}];function l(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"simulation-output-formats",children:"Simulation Output Formats"})}),"\n",(0,i.jsx)(t.p,{children:"The output of the simulation can be set to which file format or database results should be saved. There are different output types which are useful for different analyses."}),"\n",(0,i.jsx)(t.p,{children:"Current supported output types are:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Model type"}),(0,i.jsx)(t.th,{children:"Support"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"agent"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"csv"}),", ",(0,i.jsx)(t.code,{children:"mongodb"}),", ",(0,i.jsx)(t.code,{children:"postgres"}),", ",(0,i.jsx)(t.code,{children:"sqlite"}),", ",(0,i.jsx)(t.code,{children:"redis"}),", ",(0,i.jsx)(t.code,{children:"kafka"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"entity"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"csv"}),", ",(0,i.jsx)(t.code,{children:"mongodb"}),", ",(0,i.jsx)(t.code,{children:"postgres"}),", ",(0,i.jsx)(t.code,{children:"sqlite"}),", ",(0,i.jsx)(t.code,{children:"redis"}),", ",(0,i.jsx)(t.code,{children:"kafka"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"vector-layer"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"csv"}),",",(0,i.jsx)(t.code,{children:"geojson"}),",",(0,i.jsx)(t.code,{children:"mongodb"}),",",(0,i.jsx)(t.code,{children:"postgres"}),",",(0,i.jsx)(t.code,{children:"sqlite"}),",",(0,i.jsx)(t.code,{children:"geojsonsocket"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"raster-layer"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"csv"}),", ",(0,i.jsx)(t.code,{children:"asc"})]})]})]})]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["The output of ASCII Grid ",(0,i.jsx)(t.code,{children:"asc"})," for ",(0,i.jsx)(t.code,{children:"raster-layer"})," and GeoJSON ",(0,i.jsx)(t.code,{children:"geojson"})," for ",(0,i.jsx)(t.code,{children:"vector-layer"})," each generate new files. It is therefore recommended not to enable full output."]})}),"\n",(0,i.jsx)(t.h2,{id:"csv-comma-separated-file",children:"CSV (Comma Separated File)"}),"\n",(0,i.jsxs)(t.p,{children:["By default MARS supports the output in CSV and TSC format. For each type an individual ",(0,i.jsx)(t.code,{children:"csv"})," file created and all snapshots are persisted. To use CSV as the target output, the ",(0,i.jsx)(t.code,{children:"csv"})," needs to be specified in your simulation configuration."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n\t"globals": {\n\t\t"output": "csv",\n\t\t"csvOptions": {\n\t\t\t"delimiter": "127.0.0.1",\n\t\t\t"port": 5432,  \n\t\t\t"user": "postgres",\n\t\t\t"password": "mypassword"\n\t\t}\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"The CSV output can be configured with user-defined delimiter and output formats."}),"\n",(0,i.jsx)(t.h2,{id:"relational-database",children:"Relational database"}),"\n",(0,i.jsxs)(t.p,{children:["Simulation results can be stored in a relational database and queried via SQL. MARS creates and manages ad-hoc database schemas and adds new data to this schema. For analysis via SQL some examples are described ",(0,i.jsx)(t.a,{href:"/docs/tutorial/analysis/visualizing_sim_results",children:"here"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Data is created according to the Table per Class Hierachy principle. Concrete types of which instances can be created have a representation as table and columns store the value properties. No ",(0,i.jsx)(t.code,{children:"1:n"}),", ",(0,i.jsx)(t.code,{children:"n:m"})," relationships are managed."]}),"\n",(0,i.jsx)(t.p,{children:"MARS currently supports PostgreSQL and SQLite."}),"\n",(0,i.jsx)(t.h3,{id:"postgresql-postgis",children:"PostgreSQL (PostGIS)"}),"\n",(0,i.jsx)(t.p,{children:"PostgreSQL is a free, object-relational database management system that is largely compliant with the SQL standard SQL:2011."}),"\n",(0,i.jsxs)(t.p,{children:["The PostGIS is the extension for the management and processing of ",(0,i.jsx)(t.em,{children:"geospatial"})," data of the form:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",children:"SELECT tick, id, ST_SetSRID(ST_MakePoint(x, y),4326) AS geometry \nFROM my_scenario.my_agent\n"})}),"\n",(0,i.jsxs)(t.p,{children:["An overview of PostGIS spatial operations can be found ",(0,i.jsx)(t.a,{href:"http://postgis.net/workshops/postgis-intro/indexing.html#spatially-indexed-functions",children:"here"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["To use the ",(0,i.jsx)(t.code,{children:"postgres"}),", an active instance must be started and accessible. Download and install the ",(0,i.jsx)(t.a,{href:"https://www.postgresql.org/download/",children:"PostgreSQL"})," or start a container."]}),"\n",(0,i.jsxs)(t.p,{children:["We recommend to star a container, using Docker Container (",(0,i.jsx)(t.a,{href:"https://docs.docker.com/desktop/",children:"Docker Engine"})," must be installed)."]}),"\n",(0,i.jsx)(t.p,{children:"Create a directory that will be used as storage for the contents of the database:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"mkdir ~/my_postgis_storage\n"})}),"\n",(0,i.jsx)(t.p,{children:"Start the database instance with the following command:"}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Make sure you have start Docker engine and deamon first, before executing the command below"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"docker run -d --rm --name mars-postgis -e POSTGRES_PASSWORD=mypassword -e PGDATA=/var/lib/postgresql/data/pgdata -v ~/my_postgis_storage:/var/lib/postgresql/data -p 5432:5432 postgis/postgis\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This command starts a local PostgreSQL database with the default user ",(0,i.jsx)(t.code,{children:"postgres"})," and password ",(0,i.jsx)(t.code,{children:"mypassword"})," and binds the created ",(0,i.jsx)(t.code,{children:"my_data"})," folder as storage to the instance, available by the default port ",(0,i.jsx)(t.code,{children:"5432"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The parameter ",(0,i.jsx)(t.code,{children:"-d"})," specifies that it should return to the terminal immediately. The parameter ",(0,i.jsx)(t.code,{children:"--rm"})," specifies that, if necessary, an already existing container named ",(0,i.jsx)(t.code,{children:"mars-postgis"})," will be removed first. The parameter ",(0,i.jsx)(t.code,{children:"-v"})," binds the directory to get a permanent persistence. When the container is restarted, previous data is preserved."]}),"\n",(0,i.jsxs)(t.p,{children:["In the simulation configuration, connection options for the PostgreSQL can be defined under ",(0,i.jsx)(t.code,{children:"globals"}),". For the above example the following must be specified:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n\t"globals": {\n\t\t\n\t\t"output": "postgres",\n\t\t"postgresOptions": {\n\t\t  \t"host": "127.0.0.1",\n\t\t\t"port": 5432,  \n\t\t\t"user": "postgres",\n\t\t\t"password": "mypassword"\n\t\t}\n\t}\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If your agents have no ",(0,i.jsx)(t.code,{children:"outputs"}),"-key defined, their data will be automatically logged to the database. In case you have set the ",(0,i.jsx)(t.code,{children:"outputs"}),"-key, add the following item (",(0,i.jsx)(t.code,{children:'{"kind": "postgres"}'}),") to the ",(0,i.jsx)(t.code,{children:"outputs"}),"-list to enable database logging for the agent type, like seen in the following example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n    "agents": [\n        {\n            "name": "Agent",\n            "outputs": [\n                {"kind":  "csv"},\n                {"kind": "postgres"}\n            ]\n        }\n    ]\n}\n    \n'})}),"\n",(0,i.jsxs)(t.p,{children:["By default MARS connects to ",(0,i.jsx)(t.code,{children:"127.0.0.1"})," and port ",(0,i.jsx)(t.code,{children:"5432"})," using the default user ",(0,i.jsx)(t.code,{children:"postgres"})," without any password. It is therefore sufficient to specify only the ",(0,i.jsx)(t.code,{children:"mypassword"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"sqlite",children:"SQLite"}),"\n",(0,i.jsxs)(t.p,{children:["SQLite is a free program library and contains a local relational database system. Results are written to a local ",(0,i.jsx)(t.code,{children:"mars.sqlite"})," file and can be processed via SQL clients."]}),"\n",(0,i.jsxs)(t.p,{children:["For output to SQLite the configuration must be set ",(0,i.jsx)(t.code,{children:"sqlite"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n\t"globals": {\n\t\t"output": "sqlite"\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"caution",children:(0,i.jsxs)(t.p,{children:["If the model is extended with new properties and types, the old schema is overwritten in ",(0,i.jsx)(t.code,{children:"sqlite"})," and previous simulation results are lost."]})}),"\n",(0,i.jsxs)(t.p,{children:["To keep your simulation results. The ",(0,i.jsx)(t.code,{children:"mars.sqlite"})," can be copied and saved or always be recreated with a unique name:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n    "globals": {\n      "output": "sqlite",\n      "sqliteOptions": {\n          "databaseName": "your-uniqe-scenario-name"\n      }\n    }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This saves all results into the into ",(0,i.jsx)(t.code,{children:"your-uniqe-scenario-name.sqlite"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"real-time-websocket",children:"Real-time WebSocket"}),"\n",(0,i.jsx)(t.p,{children:"The WebSocket protocol is a TCP-based network protocol designed to establish a bi-directional connection between a web application and a WebSocket server or a web server that also supports WebSockets."}),"\n",(0,i.jsxs)(t.p,{children:["When the agent or layer mapping have set the flag ",(0,i.jsx)(t.code,{children:"pythonVisualization"})," to ",(0,i.jsx)(t.code,{children:"true"})," (in the ",(0,i.jsx)(t.code,{children:"config.json"})," file under ",(0,i.jsx)(t.code,{children:"globals"}),"), then the system opens up a real-time WebSocket server on ",(0,i.jsx)(t.code,{children:"ws://127.0.0.1:4567"}),". The socket can be reached via ",(0,i.jsx)(t.code,{children:"ws://127.0.0.1:4567"}),", and provides data  at the ",(0,i.jsx)(t.code,{children:"vis"})," and ",(0,i.jsx)(t.code,{children:"progress"})," paths, allowing to consume and analyze the results via a stream processing system (windowing analysis). You can use any WebSocket client that meets the standard ",(0,i.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc6455",children:"RFC 6455"}),":"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Model Type"}),(0,i.jsx)(t.th,{children:"Support"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"agent"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ws://127.0.0.1:4567/vis"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"vector-layer"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ws://127.0.0.1:4567/vis"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"raster-layer"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ws://127.0.0.1:4567/vis"})})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"agent"})," output on the ",(0,i.jsx)(t.code,{children:"vis"})," path looks like this (without ",(0,i.jsx)(t.code,{children:"pythonVisualizationWithProperties"}),", defined in the agent mapping):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n\t"t": 1, // uniqe key generated by the system.\n\t"typeName": "InfiniteDriver",\n\t"currentTick": 2,\n\t"entities": [\n\t\t{\n\t\t\t"key": 123 // unique key generated by the system.\n\t\t\t"x": 10.007940221939588,\t// x-coordinate/~longitude\n\t\t\t"y": 53.56656824833853, \t// y-coordinate/~latitude\n\t\t\t"b": 45.00\t// bearing\n\t\t}\n\t]\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Depending on the activated ",(0,i.jsx)(t.code,{children:"pythonVisualizationWithProperties"})," flag, set to ",(0,i.jsx)(t.code,{children:"true"})," in the respective ",(0,i.jsx)(t.code,{children:"agents"})," mappings, the stream also transmits the real-time values of the agents' properties for each tick, resulting in:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n\t"t": 1, // generated key\n\t"typeName": "InfiniteDriver",\n\t"currentTick": 2,\n\t"entities": [\n\t\t{\n\t\t\t"key": 123 // unique key generated by the system.\n\t\t\t"x": 10.007940221939588,\t// x-coordinate/~longitude\n\t\t\t"y": 53.56656824833853, \t// y-coordinate/~latitude\n\t\t\t"b": 124.22771241337983\t// bearing\n\t\t\t"p": {\t// all properties as a dictionary\n\t\t\t\t"Bearing": 124.22771241337983,\n\t\t\t\t"DistanceAhead": 74.0001924367821,\n\t\t\t\t"IsCollidingEntity": false,\n\t\t\t\t"IsWrongWayDriving": false,\n\t\t\t\t"LaneOnCurrentEdge": 0,\n\t\t\t\t"Length": 0.0,\n\t\t\t\t"MaxSpeed": 56.0,\n\t\t\t\t"ModalityType": "CarDriving",\n\t\t\t\t"PositionOnCurrentEdge": 46.29075061888411,\n\t\t\t\t"Speed": 1.4569999999999999,\n\t\t\t\t"SpeedChange": 0.728\n\t\t\t}\n\t\t}\n\t]\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In addition to displaying the ",(0,i.jsx)(t.code,{children:"agent"})," output, you can also stream the ",(0,i.jsx)(t.code,{children:"vector-layer"})," and ",(0,i.jsx)(t.code,{children:"raster-layer"}),". When specifying the output on a data layer, the JSON output appears as follows:"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Be carefull when streaming layer date ",(0,i.jsx)(t.em,{children:"for each tick"}),", especially when writing out huge raster layer, the can decrease the performance massively."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n\t"currentTick": 2,\n\t"maxTicks": 10000,\n\t"worldSize": {"minX": 8.4213643278, "minY": 53.3949251389, "maxX": 10.3242585128, "maxY": 53.9644376366 },\n\t"vectors": [\n\t\t{\n\t\t\t"t": 1, // generated key\n\t\t\t"typeName": "POILayer",\n\t\t\t"f": [\n\t\t\t\t// geojson object of each feature\n\t\t\t]\n\t\t}\n\t]\n\t"rasters": [\n\t\t{\n\t\t\t"t": 2, // generated key\n\t\t\t"typeName": "PrecipitationLayer"\n\t\t\t"cellWidth": 150,\t// amounts of cells x-dimension\n\t\t\t"cellHeight": 100,\t// amounts of cells y-dimension\n\t\t\t"cells": [\n\t\t\t\t// An iterator as the form [x_grid_coordinate,y_grid_coordinate,cell_value_double]\n\t\t\t]\n\t\t}\n\t]\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);