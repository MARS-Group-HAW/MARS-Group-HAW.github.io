"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4137],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=r,m=g["".concat(l,".").concat(d)]||g[d]||u[d]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},22015:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:50},o="Spawning and Removing Agents and Entities",s={unversionedId:"tutorial/development/spawning",id:"tutorial/development/spawning",title:"Spawning and Removing Agents and Entities",description:"To create instances of agent types and registering them at the runtime system to process the Tick(), two concepts are available:",source:"@site/docs/tutorial/development/spawning.md",sourceDirName:"tutorial/development",slug:"/tutorial/development/spawning",permalink:"/docs/tutorial/development/spawning",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/development/spawning.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Layers",permalink:"/docs/tutorial/development/layers"},next:{title:"Environments",permalink:"/docs/tutorial/development/environments/"}},l={},p=[{value:"Creating and Registering single object using <code>RegisterAgent</code>",id:"creating-and-registering-single-object-using-registeragent",level:2},{value:"Mass Generation using <code>AgentManager</code>",id:"mass-generation-using-agentmanager",level:2},{value:"Removing and unregister an object from simulation",id:"removing-and-unregister-an-object-from-simulation",level:2}],c={toc:p};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"spawning-and-removing-agents-and-entities"},"Spawning and Removing Agents and Entities"),(0,r.kt)("p",null,"To ",(0,r.kt)("strong",{parentName:"p"},"create")," instances of agent types and ",(0,r.kt)("strong",{parentName:"p"},"registering")," them at the runtime system to process the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tick()"),", two concepts are available:"),(0,r.kt)("h2",{id:"creating-and-registering-single-object-using-registeragent"},"Creating and Registering single object using ",(0,r.kt)("inlineCode",{parentName:"h2"},"RegisterAgent")),(0,r.kt)("p",null,"Individual instances can be instantiated directly using ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," constructor expression. The instance must be registered with the runtime system by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"RegisterAgent")," handle given through the ",(0,r.kt)("inlineCode",{parentName:"p"},"InitLayer")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ILayer")," implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool InitLayer(TInitData layerInitData, \n    RegisterAgent registerAgentHandle, UnregisterAgent unregisterAgentHandle) \n{\n    var layer = this;\n    var agent = new MyAgentType();\n\n    registerAgent(layer, agent);\n    return true;\n}\n")),(0,r.kt)("p",null,"Optionally the ",(0,r.kt)("inlineCode",{parentName:"p"},"RegisterAgent")," handle allows to set and override the execution frequency (for more see ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/configuration/execution"},"here"),") to specify ",(0,r.kt)("strong",{parentName:"p"},"after how many ticks")," the agent should be called again. Otherwise the registry uses the settings from the simulation configuration ",(0,r.kt)("inlineCode",{parentName:"p"},"config.json"),". "),(0,r.kt)("p",null,"If an output has been specified using ",(0,r.kt)("inlineCode",{parentName:"p"},"output"),", the object is managed accordingly in the output as well automatically."),(0,r.kt)("h2",{id:"mass-generation-using-agentmanager"},"Mass Generation using ",(0,r.kt)("inlineCode",{parentName:"h2"},"AgentManager")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AgentManager")," is a service component that can be used to initialize agent quantities from the input."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AgentManager")," is a static class that can be referenced directly and offers two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CreateAgents<Type>"),": This method creates a set of agents of the specified type but does not register them, so that their ",(0,r.kt)("inlineCode",{parentName:"li"},"Tick()")," methods are called and their versions are managed in the output."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SpawnAgents<Type>"),": This method creates ",(0,r.kt)("strong",{parentName:"li"},"and")," registers the set of agents of the specified type. ")),(0,r.kt)("p",null,"Spawning of agents is usually done within the ",(0,r.kt)("inlineCode",{parentName:"p"},"InitLayer")," method of an ",(0,r.kt)("inlineCode",{parentName:"p"},"ILayer")," implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public bool InitLayer(\n    TInitData layerInitData,\n    RegisterAgent registerAgentHandle, \n    UnregisterAgent unregisterAgentHandle) \n{\n    var layer = this;\n\n    AgentManager.SpawnAgents<MyOtherAgent>(\n        layerInitData.AgentInitConfigs.First(config => config.Name == "MyOtherAgent"), \n        registerAgentHandle, unregisterAgentHandle, \n        new List<ILayer> {layer});\n\n    return true;\n}\n')),(0,r.kt)("p",null,"Since the agent interacts with the system via its layer, it is necessary that the ",(0,r.kt)("inlineCode",{parentName:"p"},"AgentManager")," is given its own layer instance as ",(0,r.kt)("strong",{parentName:"p"},"dependency"),"."),(0,r.kt)("p",null,"In the agent this dependent layer can be referenced as a property which is resolved by the system via ",(0,r.kt)("inlineCode",{parentName:"p"},"PropertyInjection"),", for example as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MyAgentType : AbstractAgent \n{\n    [PropertyDescription]\n    public MyLayerType Layer { get; set; }\n\n    public void override Tick() {\n        // access your layer here (e.g., Layer.Environment.Explore(...))\n    }\n}\n")),(0,r.kt)("p",null,"Alternatively, dependent layer can be defined directly as ",(0,r.kt)("strong",{parentName:"p"},"constructor parameter")," as showed below: "),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Because of the ",(0,r.kt)("strong",{parentName:"p"},"testing")," of your own model, it is recommended to keep the required constructor parameters as low as possible.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MyAgentType : AbstractAgent \n{\n    public MyLayerType Layer { get; set; }\n\n    public MyAgentType(MyLayerType layer) \n    {\n        Layer = layer;\n    }\n\n    public void override Tick() {\n        // access your layer here (e.g., Layer.Environment.Explore(...))\n    }\n}\n")),(0,r.kt)("h2",{id:"removing-and-unregister-an-object-from-simulation"},"Removing and unregister an object from simulation"))}g.isMDXComponent=!0}}]);