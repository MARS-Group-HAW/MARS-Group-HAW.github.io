"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3596],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:25},o="Steering concept",s={unversionedId:"tutorial/soh/steering",id:"tutorial/soh/steering",title:"Steering concept",description:"To use a transportation capability (modal type) an agent requires to implement the `ISteeringCapable interface (e.g. ICarSteeringCapable, see figure below), which defines methods and properties that this agent must offer to be able to steer that Vehicle`.",source:"@site/docs/tutorial/soh/steering.md",sourceDirName:"tutorial/soh",slug:"/tutorial/soh/steering",permalink:"/docs/tutorial/soh/steering",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/soh/steering.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Entities",permalink:"/docs/tutorial/soh/entities"},next:{title:"Modal Layer",permalink:"/docs/tutorial/soh/layers/modal_layer"}},l={},p=[],c={toc:p};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"steering-concept"},"Steering concept"),(0,r.kt)("p",null,"To use a transportation capability (modal type) an agent requires to implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"ISteeringCapable")," interface (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"ICarSteeringCapable"),", see figure below), which defines methods and properties that this agent must offer to be able to steer that ",(0,r.kt)("inlineCode",{parentName:"p"},"Vehicle"),".\nBesides steering the vehicle the agent may also use some vehicles as a passenger (e.g. using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/soh/entities#ferry"},(0,r.kt)("inlineCode",{parentName:"a"},"Ferry")),"). The ",(0,r.kt)("inlineCode",{parentName:"p"},"IPassengerCapable")," is implemented by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/soh/agents/multi_modal_agent"},(0,r.kt)("inlineCode",{parentName:"a"},"MultimodalAgent"))," and informs the agent with a ",(0,r.kt)("inlineCode",{parentName:"p"},"PassengerMessage")," about the current status of the drive. It may for instance notify the agent at every stop (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"FerryStation"),") so that the agent may decide to leave or stay on the ferry."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ISteeringHandle")," is the interface for an agent to drive the vehicle. Every ",(0,r.kt)("inlineCode",{parentName:"p"},"Vehicle")," has a specific steering handle and provides that to the agent on successful enter."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"uml_car_steering",src:n(73878).Z,width:"690",height:"343"})),(0,r.kt)("p",null,"Adding new transportation modalities is supported by the ",(0,r.kt)("inlineCode",{parentName:"p"},"MultimodalAgent")," if it complies with the ",(0,r.kt)("em",{parentName:"p"},"steering concept")," (see below)."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"uml_multimodal_agent",src:n(42145).Z,width:"1416",height:"795"})),(0,r.kt)("mermaid",{value:"classDiagram\n\n    class IPassengerCapable {\n        <<Interface>>\n        Notify(passengerMessage:PassengerMessage) void\n    }\n\n    class IWalkingCapable {\n        <<Interface>>\n        PreferredSpeed double\n    }\n\n    class ISteeringCapable {\n        <<Interface>>\n    }\n\n    IPositionable <|-- IPassengerCapable\n    IPassengerCapable <|-- ISteeringCapable\n    ISteeringCapable <|-- IWalkingCapable\n\n    class WalkingSteeringHandle {\n        + WalkingSteeringHandle(multimodalAgent:MultimodalAgent, accelerator:WalkingAccelerator, environment:ISpatialGraphEnvironment, position:Position)\n        + Environment : ISpatialGraphEnvironment\n        + Route : Route\n        + GoalReached : bool\n        + Velocity : double\n        + <<virtual>> Move() void\n        + Position : Position\n        + LeaveVehicle(passengerCapable:IPassengerCapable) bool\n    }\n    ISteeringHandle <|-- WalkingSteeringHandle\n\n    class PassengerMessage {\n        <<Enumeration>>\n        GoalReached\n        NoDriver\n        TerminalStation\n    }"}))}u.isMDXComponent=!0},73878:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/uml_car_steering-8f3a1ab6c51f2859739861a231c118c6.png"},42145:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/uml_multimodal_agent-fe1264e79575ab62030ea0d1742e60aa.png"}}]);