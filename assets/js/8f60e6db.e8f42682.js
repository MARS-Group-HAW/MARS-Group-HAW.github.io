"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8677],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_label:"Kubernetes",sidebar_position:100},o="Simulations in a Kubernetes cluster",l={unversionedId:"tutorial/development/deploy_in_cloud",id:"tutorial/development/deploy_in_cloud",title:"Simulations in a Kubernetes cluster",description:"Simulations can be run both locally and distributed within a Kubernetes cluster (K8s). Kubernetes orchestrates applications across a set of heterogeneous computing machines.",source:"@site/docs/tutorial/development/deploy_in_cloud.md",sourceDirName:"tutorial/development",slug:"/tutorial/development/deploy_in_cloud",permalink:"/docs/tutorial/development/deploy_in_cloud",draft:!1,editUrl:"https://github.com/daniel260/theraflow-doc/edit/main/docs/tutorial/development/deploy_in_cloud.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_label:"Kubernetes",sidebar_position:100},sidebar:"tutorialSidebar",previous:{title:"Known Problems and Solutions",permalink:"/docs/tutorial/development/known-problems"},next:{title:"Configuration",permalink:"/docs/category/configuration"}},s={},p=[{value:"Prerequisite.",id:"prerequisite",level:2},{value:"Customize the simulation start",id:"customize-the-simulation-start",level:2},{value:"Create a simulation application",id:"create-a-simulation-application",level:2},{value:"Preparing a container",id:"preparing-a-container",level:2},{value:"Preparing a deployment",id:"preparing-a-deployment",level:2},{value:"Starting the simulation in the cluster",id:"starting-the-simulation-in-the-cluster",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"simulations-in-a-kubernetes-cluster"},"Simulations in a Kubernetes cluster"),(0,i.kt)("p",null,"Simulations can be run both locally and distributed within a Kubernetes cluster (K8s). Kubernetes orchestrates applications across a set of heterogeneous computing machines."),(0,i.kt)("h2",{id:"prerequisite"},"Prerequisite."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.docker.com/products/docker-desktop"},"Docker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://kubernetes.io/de/docs/tasks/tools/install-kubectl/"},"kubectl")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://userdoc.informatik.haw-hamburg.de/doku.php?id=docu:informatikcomputecloud#login/"},"kubelogin")," (If simulation is to be started in MARS ICC-K8s).")),(0,i.kt)("h2",{id:"customize-the-simulation-start"},"Customize the simulation start"),(0,i.kt)("p",null,"To start a simulation in the K8s computing cluster the model must be built. Navigate to the directory where the ",(0,i.kt)("inlineCode",{parentName:"p"},"csproj")," file and your entry point ",(0,i.kt)("inlineCode",{parentName:"p"},"Main()")," is located (More about defining the entry point can be found ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/development/model"},"here"),")."),(0,i.kt)("p",null,"Open the file and create a ",(0,i.kt)("inlineCode",{parentName:"p"},"ModelDescription")," like ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/development/model"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using Mars.Interfaces;\nusing Mars.Interfaces.Model;\nusing Mars.Components.Starter;\n\npublic static class Program \n{\n    public static void Main() \n    {\n        var description = new ModelDescription();\n        \n        // Add here your layers\n        description.AddLayer<YourLayerType>();\n        // maybe more raster and vector layer\n        // description.AddLayer<YourVectorLayer>();\n        // description.AddLayer<YourRasterLayer>();\n        \n        // Add your agent types \n        description.AddAgent<YourAgentType, YourLayerType>();\n        \n        // Optionally add entity types\n        // description.AddEntity<YourEntity>();\n        \n        \n        var configFromOutside = Environment.GetEnvironmentVariable("CONFIG");\n        var simulationConfig = SimulationConfig.Deserialize(configFromOutside);\n        \n        // Create the simulation application and resolve the simulation entry point\n        var application = SimulationStarter.BuildApplication(description, args);\n        var simulation = application.Resolve<ISimulation>();\n        \n        // Start your simulation and print some measurements\n        var state = simulation.StartSimulation();\n        Console.WriteLine($"Input/Initialization phase lasted:   {state.InputWatch.ElapsedMilliseconds}");\n        Console.WriteLine($"Computing phase lasted:              {state.TickWatch.ElapsedMilliseconds}");\n        Console.WriteLine($"Output/Write phase lasted:           {state.OutputWatch.ElapsedMilliseconds}");\n    }\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Main()")," method has been changed to get the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimulationConfig")," via a ",(0,i.kt)("inlineCode",{parentName:"p"},"CONFIG")," environment variable instead of reading it via ",(0,i.kt)("inlineCode",{parentName:"p"},"--sm config.json")," or directly from a file."),(0,i.kt)("h2",{id:"create-a-simulation-application"},"Create a simulation application"),(0,i.kt)("p",null,"An existing model must be packaged into a container to run in a K8s cluster. The following command creates the simulation and saves the program (box) in the folder ",(0,i.kt)("inlineCode",{parentName:"p"},"my_simulation_app"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet publish -c Release -o my_simulation_app\n")),(0,i.kt)("p",null,"Make sure that all relevant input files (e.g.: ",(0,i.kt)("inlineCode",{parentName:"p"},"geojson")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"asc")," files) are present in the folder ",(0,i.kt)("inlineCode",{parentName:"p"},"my_simulatio_app"),"."),(0,i.kt)("h2",{id:"preparing-a-container"},"Preparing a container"),(0,i.kt)("p",null,"The easiest way to create a container is as a Docker container. To do this, an empty file called ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," must be created, from which the ",(0,i.kt)("strong",{parentName:"p"},"Docker image")," will be created:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"touch Dockerfile\n")),(0,i.kt)("p",null,"Open the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and insert the following lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dockerfile",metastring:'title="Dockerfile"',title:'"Dockerfile"'},"FROM mcr.microsoft.com/dotnet/runtime:6.0\n\nCOPY ./ ./\nWORKDIR ./\n\nENTRYPOINT dotnet <YourModelName>.dll \n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Adjust the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"YourModelName")," for your model. This is the name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"csproj")," file where you run these commands.")),(0,i.kt)("p",null,"Build the Docker image and tag it with a fully-qualified name of your container repo. The container repo is where the image is then stored and can be loaded and run by K8s:"),(0,i.kt)("p",null,"For the MARS ICC, the following applies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker build --platform linux/amd64 -t git.haw-hamburg.de:5005/<user>/<repo>/my_simulation:latest .\n")),(0,i.kt)("p",null,"The image has been built and must be uploaded at the container registration. Please log in to the container registration first.\nFor the MARS ICC applies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker login git.haw-hamburg.de:5005 \n")),(0,i.kt)("p",null,"Upload the image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker push git.haw-hamburg.de:5005/<user>/<repo>/my_simulation:latest \n")),(0,i.kt)("h2",{id:"preparing-a-deployment"},"Preparing a deployment"),(0,i.kt)("p",null,"For launching in K8s, a specification is required in addition to the container to launch an application (simulation). "),(0,i.kt)("p",null,"First make sure you have a ",(0,i.kt)("a",{parentName:"p",href:"https://icc.informatik.haw-hamburg.de/docs/haw-tutorial/#deployment-auslieferung-der-applikation-in-die-icc"},"deploy-token configured"),". This is need, so K8s can pull the previously created Docker image from the HAW GitLab registry."),(0,i.kt)("p",null,"Then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"my_simulation_job.yml")," file and add the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: my_simulation\nspec:\n  template:\n    spec:\n      imagePullSecrets:\n        - name: application-deploy-token\n      containers:\n      - name: my_simulation\n        image: git.haw-hamburg.de:5005/mars/life/my_simulation:latest\n        env:\n          - name: CONFIG\n            value: \'\n            {\n              "globals": {\n               "deltaT": 1,\n               "startPoint": "2020-01-01T00:00:00",\n               "endPoint": "2020-01-31T00:00:00",\n               "deltaTUnit": "seconds"\n             },\n              "agents": [\n                { "name": "YourAgentType", "count": 10 }\n              ],\n              "layers": [\n                { "name": "YourVectorLayer", "file": "res/your_vector_layer_input.geojson" },\n                { "name": "YourRasterLayer", "file": "res/your_raster_input.asc" },\n            }\n            \'\n')),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/configuration/sim_config_options"},"here")," simulation configuration is noted in JSON and available as a string via the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"CONFIG")," in the application. Thus the scenario can be adapted directly via this specification. Furthermore, all input files (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"geojson")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"asc")," files) must be included in the image."),(0,i.kt)("h2",{id:"starting-the-simulation-in-the-cluster"},"Starting the simulation in the cluster"),(0,i.kt)("p",null,"For the MARS ICC it is necessary to log in to the cluster beforehand using the tools ",(0,i.kt)("inlineCode",{parentName:"p"},"kubelogin"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubelogin --username <HAWIdentifer such as abc123> --password <YourPassword>\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl")," tool can be used to apply the specification to the set cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f my_simulation_job.yml\n")),(0,i.kt)("p",null,"K8s then tries to load the created and uploaded Docker image and start the container. At startup, the simulation application loads the simulation configuration from the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"CONFIG"),". "),(0,i.kt)("p",null,"Via the command ",(0,i.kt)("inlineCode",{parentName:"p"},"$ kubectl get pod")," currently running applications are listed. An entry of the form ",(0,i.kt)("inlineCode",{parentName:"p"},"my_simulation-cbf7c989d-fnpzv")," should appear and have the status ",(0,i.kt)("inlineCode",{parentName:"p"},"Running")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Creating"),"."),(0,i.kt)("p",null,"If the container has the status ",(0,i.kt)("inlineCode",{parentName:"p"},"Succeeded"),", the simulation application has finished successfully.\nIf the container has the status ",(0,i.kt)("inlineCode",{parentName:"p"},"Failed"),", the cause is usually a configuration- or model error and the reason must be determined using simulation logs or the K8s logs:"),(0,i.kt)("p",null,"Showing the internal logs and console output when something crashed within the simulation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs pod/my_simulation-cbf7c989d-fnpzv\n")),(0,i.kt)("p",null,"Showing the K8s configuration and applied specification of ",(0,i.kt)("inlineCode",{parentName:"p"},"my_simulation_job.yml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl describe pod my_simulation-cbf7c989d-fnpzv\n")))}c.isMDXComponent=!0}}]);