"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1323],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),p=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(u.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,d=c["".concat(u,".").concat(g)]||c[g]||f[g]||i;return n?o.createElement(d,a(a({ref:t},s),{},{components:n})):o.createElement(d,a({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=g;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},93912:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const i={sidebar_position:70,description:"Explains how to configure output filters to reduce output size."},a="Output Filter",l={unversionedId:"tutorial/configuration/output_filter",id:"tutorial/configuration/output_filter",title:"Output Filter",description:"Explains how to configure output filters to reduce output size.",source:"@site/docs/tutorial/configuration/output_filter.md",sourceDirName:"tutorial/configuration",slug:"/tutorial/configuration/output_filter",permalink:"/docs/tutorial/configuration/output_filter",draft:!1,editUrl:"https://github.com/MARS-Group-HAW/MARS-Group-HAW.github.io/edit/main/docs/tutorial/configuration/output_filter.md",tags:[],version:"current",sidebarPosition:70,frontMatter:{sidebar_position:70,description:"Explains how to configure output filters to reduce output size."},sidebar:"tutorialSidebar",previous:{title:"Simulation Output Formats",permalink:"/docs/tutorial/configuration/sim_output_formats"},next:{title:"Data sources",permalink:"/docs/tutorial/data-sources/"}},u={},p=[],s={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"output-filter"},"Output Filter"),(0,r.kt)("p",null,"Since MARS supports model scenarios that can potentially generate huge amount of data, the logging of those extensive data can slow the performance of a model (e.g. SmartOpenHamburg models with a huge set of involved agents). The modeler can only be interested in a specific subset of agents or for specific agent-states, e.g., ",(0,r.kt)("em",{parentName:"p"},"is the agent in specfici state")," or ",(0,r.kt)("em",{parentName:"p"},"log data only for an agent of specific attribute"),". "),(0,r.kt)("p",null,"MARS provides ",(0,r.kt)("inlineCode",{parentName:"p"},"outputFilter"),"s for agent to reduce the amount of logged data to those of interest. A dynamic predicate can be provided to filter those entities matching the condition. An agent or entity type can have an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"outputFilter")," which is able to accept a set of ",(0,r.kt)("inlineCode",{parentName:"p"},"AND")," associated expressions in form of:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Agent configuration in the config.js"',title:'"Agent',configuration:!0,in:!0,the:!0,'config.js"':!0},'{\n    "name": "MyAgent",\n    "count": 10000,\n    "file": "output.csv",\n    "outputFilter": [{\n        "parameter": "Species",\n        "operator": "in",\n        "values": ["SpeciesA", "SpeciesC"]\n    }]\n}\n')),(0,r.kt)("p",null,"For this example for an Agent class ",(0,r.kt)("inlineCode",{parentName:"p"},"MyAgent")," the output rows per tick would only be created, if in the tick the agent's property ",(0,r.kt)("inlineCode",{parentName:"p"},"Species")," has the value ",(0,r.kt)("inlineCode",{parentName:"p"},"SpeciesA")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"SpeciesC"),". "),(0,r.kt)("p",null,"You can define multiple filter which will be chained. All individual filters must evaluate to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the values of the tick should be logged."),(0,r.kt)("p",null,"If you don't have a specific property you want to watch for, it can be a good option to define a new property to enable/disable the logging of a tick result like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Agent property"',title:'"Agent','property"':!0},"public bool StoreTickResult { get; set; } = false;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Agent configuration in config.js',title:'"Agent',configuration:!0,in:!0,"config.js":!0},'{\n    "name": "MyAgent",\n    "output": "csv",\n    "outputFilter":[{\n        "parameter": "StoreTickResult",\n        "operator": "in",\n        "values": [true]\n    }]\n}\n')),(0,r.kt)("p",null,"In side the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tick()")," method you can now do as follows. This will log all agent properties only when your expression ",(0,r.kt)("inlineCode",{parentName:"p"},"YourContraint")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Tick() method with outputFilter"',title:'"Tick()',method:!0,with:!0,'outputFilter"':!0},"public void Tick()\n{\n    // at beginning of each tick set \n    // to false to prevent logging\n    StoreTickResult = false;\n\n    // your logic...\n\n    // your logic reached a state where you want \n    // to log all agent properties\n    if (YourConstraint)\n    {\n        StoreTickResult = true;\n    }\n}\n")))}c.isMDXComponent=!0}}]);