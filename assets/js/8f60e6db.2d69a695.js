"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4232],{62723:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorial/development/deploy_in_cloud","title":"Simulations in a Kubernetes cluster","description":"Simulations can be run both locally and distributed within a Kubernetes cluster (K8s). Kubernetes orchestrates applications across a set of heterogeneous computing machines.","source":"@site/docs/tutorial/development/deploy_in_cloud.md","sourceDirName":"tutorial/development","slug":"/tutorial/development/deploy_in_cloud","permalink":"/docs/tutorial/development/deploy_in_cloud","draft":false,"unlisted":false,"editUrl":"https://github.com/MARS-Group-HAW/MARS-Group-HAW.github.io/edit/main/docs/tutorial/development/deploy_in_cloud.md","tags":[],"version":"current","sidebarPosition":100,"frontMatter":{"sidebar_label":"Kubernetes","sidebar_position":100},"sidebar":"tutorialSidebar","previous":{"title":"Known Problems and Solutions","permalink":"/docs/tutorial/development/known-problems"},"next":{"title":"Configuration","permalink":"/docs/category/configuration"}}');var t=i(74848),s=i(28453);const a={sidebar_label:"Kubernetes",sidebar_position:100},r="Simulations in a Kubernetes cluster",c={},l=[{value:"Prerequisite.",id:"prerequisite",level:2},{value:"Customize the simulation start",id:"customize-the-simulation-start",level:2},{value:"Preparing a container",id:"preparing-a-container",level:2},{value:"Preparing a deployment",id:"preparing-a-deployment",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"simulations-in-a-kubernetes-cluster",children:"Simulations in a Kubernetes cluster"})}),"\n",(0,t.jsx)(n.p,{children:"Simulations can be run both locally and distributed within a Kubernetes cluster (K8s). Kubernetes orchestrates applications across a set of heterogeneous computing machines."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisite",children:"Prerequisite."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.docker.com/products/docker-desktop",children:"Docker"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kubernetes.io/de/docs/tasks/tools/install-kubectl/",children:"kubectl"})," (Can be activated in Docker Desktop)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.haw-hamburg.de/vpn/",children:"eduVPN"})," (for access to ICC)"]}),"\n",(0,t.jsx)(n.li,{children:"You are in the model-soh directory in the terminal"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"customize-the-simulation-start",children:"Customize the simulation start"}),"\n",(0,t.jsxs)(n.p,{children:["To start a simulation in the K8s computing cluster the model must be built. Navigate to the directory where the ",(0,t.jsx)(n.code,{children:"csproj"})," file and your entry point ",(0,t.jsx)(n.code,{children:"Main()"})," is located (More about defining the entry point can be found ",(0,t.jsx)(n.a,{href:"/docs/tutorial/development/model",children:"here"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Open the file and create a ",(0,t.jsx)(n.code,{children:"ModelDescription"})," like ",(0,t.jsx)(n.a,{href:"/docs/tutorial/development/model",children:"here"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using Mars.Interfaces;\nusing Mars.Interfaces.Model;\nusing Mars.Components.Starter;\n\npublic static class Program \n{\n    public static void Main() \n    {\n        var description = new ModelDescription();\n        \n        // Add here your layers\n        description.AddLayer<YourLayerType>();\n        // maybe more raster and vector layer\n        // description.AddLayer<YourVectorLayer>();\n        // description.AddLayer<YourRasterLayer>();\n        \n        // Add your agent types \n        description.AddAgent<YourAgentType, YourLayerType>();\n        \n        // Optionally add entity types\n        // description.AddEntity<YourEntity>();\n        \n        \n        var configFromOutside = Environment.GetEnvironmentVariable("CONFIG");\n        var simulationConfig = SimulationConfig.Deserialize(configFromOutside);\n        \n        // Create the simulation application and resolve the simulation entry point\n        var application = SimulationStarter.BuildApplication(description, args);\n        var simulation = application.Resolve<ISimulation>();\n        \n        // Start your simulation and print some measurements\n        var state = simulation.StartSimulation();\n        Console.WriteLine($"Input/Initialization phase lasted:   {state.InputWatch.ElapsedMilliseconds}");\n        Console.WriteLine($"Computing phase lasted:              {state.TickWatch.ElapsedMilliseconds}");\n        Console.WriteLine($"Output/Write phase lasted:           {state.OutputWatch.ElapsedMilliseconds}");\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Main()"})," method has been changed to get the ",(0,t.jsx)(n.code,{children:"SimulationConfig"})," via a ",(0,t.jsx)(n.code,{children:"CONFIG"})," environment variable instead of reading it via ",(0,t.jsx)(n.code,{children:"--sm config.json"})," or directly from a file."]}),"\n",(0,t.jsx)(n.h2,{id:"preparing-a-container",children:"Preparing a container"}),"\n",(0,t.jsxs)(n.p,{children:["All the following files are created in your own SOHBox folder ",(0,t.jsx)(n.strong,{children:"but"})," the commands are executed from root (in soh it is model-soh folder)."]}),"\n",(0,t.jsxs)(n.p,{children:["The easiest way to create a container is as a Docker container. To do this, an empty file called ",(0,t.jsx)(n.code,{children:"Dockerfile"})," must be created, from which the ",(0,t.jsx)(n.strong,{children:"Docker image"})," will be created"]}),"\n",(0,t.jsxs)(n.p,{children:["Open the ",(0,t.jsx)(n.code,{children:"Dockerfile"})," and insert the following lines:"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Replace YourBox with your actual box name. Also, a file called start.sh is needed in your box \u2014 an example follows below."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",metastring:'title="Dockerfile"',children:'# ----------------------------\n# 1. Build Stage\n# ----------------------------\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\n# Copy everything into the container\nCOPY . .\n# Restore and publish the project\nRUN dotnet restore SOH.sln\nRUN dotnet publish YourBox/YourBox.csproj -c Release -o /app\n# ----------------------------\n# 2. Runtime Stage\n# ----------------------------\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime\nWORKDIR /app\nCOPY YourBox/start.sh .\nRUN chmod +x /app/start.sh\n# Copy published DLLs\nCOPY --from=build /app .\n# Copy resources needed at runtime\nCOPY --from=build /src/YourBox/resources ./resources\nCOPY --from=build /src/YourBox/config.json /config/config.json\n# Set config path\nENV MARS_CONFIG_PATH=/config/config.json\n# Run the application\n#ENTRYPOINT ["dotnet", "YourBox.dll"]\nENTRYPOINT ["./start.sh"]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Create a file called ",(0,t.jsx)(n.code,{children:"start.sh"})," in the same directory as the ",(0,t.jsx)(n.code,{children:"Dockerfile"})," and add the following lines:"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"This script ensures the simulation saves the output GeoJSON file before terminating, as MARS does not do this by default.\nRename Outputname to your actual output and YourBox to your box."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\ndotnet YourBox.dll\ncp Outputname_trips.geojson output/\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create personal access token:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Go to ",(0,t.jsx)(n.a,{href:"https://git.haw-hamburg.de/-/user_settings/personal_access_tokens",children:"https://git.haw-hamburg.de/-/user_settings/personal_access_tokens"}),", add new token"]}),"\n",(0,t.jsx)(n.li,{children:"Save the token locally"}),"\n",(0,t.jsx)(n.li,{children:"Log in to Docker using the inf username and the token:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker login git.haw-hamburg.de:5000\n"})}),"\n",(0,t.jsxs)(n.p,{children:["On ",(0,t.jsx)(n.a,{href:"https://git.haw-hamburg.de/",children:"https://git.haw-hamburg.de/"})," create a new repository"]}),"\n",(0,t.jsx)(n.p,{children:"Build your Docker image:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker build -f YourBox/Dockerfile -t git.haw-hamburg.de:5000/<inf-username>/<repository>/<your-image-name:latest> .\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker push git.haw-hamburg.de:5000/<inf-username>/<repository>/<your-image-name:latest>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"preparing-a-deployment",children:"Preparing a deployment"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Go to ",(0,t.jsx)(n.a,{href:"https://icc-login.informatik.haw-hamburg.de/",children:"https://icc-login.informatik.haw-hamburg.de/"})]}),"\n",(0,t.jsx)(n.li,{children:"Create a icc-config.yaml file"}),"\n",(0,t.jsx)(n.li,{children:"Add the downloaded configuration to icc-config.yaml"}),"\n",(0,t.jsx)(n.li,{children:"Note: This file is valid for 7 days only. Renew it regularly."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Create a Kubernetes Secret:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl -n <namepspace> create secret docker-registry gitlab-registry-secret \\\n  --docker-server=git.haw-hamburg.de:5000 \\\n  --docker-username=infwUsername \\\n  --docker-password=YOUR_TOKEN \\\n  --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create configmap.yaml:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: soh-config\n  namespace: <namespace>\ndata:\n  config.json: |\n    {\n      "simulation": {\n        "iterations": 43200,\n        "randomSeed": 42\n      },\n      "outputs": [\n        {\n          "kind": "trips",\n          "outputConfiguration": {\n            "tripsFields": [\n              "StableId",\n              "StartPosition",\n              "EndPosition",\n              "DistanceTraveled",\n              "Duration"\n            ]\n          }\n        }\n      ]\n    }\n\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"The reason why parts of the config.json are specified is so that the Docker container does\nnot need to be rebuilt when changes are made to the configuration."})}),"\n",(0,t.jsx)(n.p,{children:"Then create it with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl create configmap soh-config --from-file=config.json=YourBox/config.json --kubeconfig=YourBox/icc-config.yaml -n <namespace>\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"You can choose the name of the configmap yourself. The namespace is the name of your user space, found in the kubectl config file."})}),"\n",(0,t.jsx)(n.p,{children:"Create deployment.yaml:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: <yourname>-job\n  namespace: <namespace>\nspec:\n  template:\n    metadata:\n      labels:\n        job-name: <soh-job>\n    spec:\n      containers:\n        - name: soh-logistics\n          image: git.haw-hamburg.de:5000/<infwUsername>/<repo>/<name:tag>\n          imagePullPolicy: Always\n          env:\n            - name: MARS_CONFIG_PATH\n              value: /config/config.json\n          volumeMounts:\n            - name: config-volume\n              mountPath: /config\n            - name: output-volume\n              mountPath: /app/output\n          resources:\n            requests:\n              memory: "3Gi"\n              cpu: "2"\n            limits:\n              memory: "4Gi"\n              cpu: "2"\n      restartPolicy: Never\n      volumes:\n        - name: config-volume\n          configMap:\n            name: <soh-logistics-config>\n        - name: output-volume\n          persistentVolumeClaim:\n            claimName: <output-pvc-name>\n      imagePullSecrets:\n        - name: gitlab-registry-secret\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Further information about the available resources can be found ",(0,t.jsx)(n.a,{href:"https://rzinf.pages.inf.haw-hamburg.de/doku/icc/resourcequotas/",children:"here"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"Create output-pvc.yaml:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: soh-output-pvc\n  namespace: namespace\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: <needed storage e.g., 4Gi>\n  storageClassName: rook-ceph-block\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"This is the ICC storage."})}),"\n",(0,t.jsx)(n.p,{children:"Create pvc-access-pod.yaml:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: pvc-access-pod\n  namespace: <userspace>\nspec:\n  containers:\n    - name: pvc-access-container\n      image: ubuntu:latest\n      command: ["/bin/bash", "-c", "sleep 3600"]\n      volumeMounts:\n        - name: output-volume\n          mountPath: /data\n  volumes:\n    - name: output-volume\n      persistentVolumeClaim:\n        claimName: soh-output-pvc\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"This is the pod that will be used to access the output files."})}),"\n",(0,t.jsx)(n.p,{children:"Deploy the Persistent Volume Claim:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f YourBox/output-pvc.yaml --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check PVC Status:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl get pvc -n <namespace> --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Expected Status is Bound"}),"\n",(0,t.jsx)(n.p,{children:"Deploy to ICC:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f YourBox/deployment.yaml --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check Pod Status:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl get pods -n <namespace> --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check runtime status:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl describe pod <pod-name> -n <namespace> --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"Example output:"}),(0,t.jsx)(n.p,{children:"ContainerCreating = Starting"}),(0,t.jsx)(n.p,{children:"Error = Error"}),(0,t.jsx)(n.p,{children:"Running = Running"}),(0,t.jsx)(n.p,{children:"Completed = Finished"})]}),"\n",(0,t.jsx)(n.p,{children:"Check logs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl logs <pod-name> -n <namespace> --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Start pvc-access-pod (after job completes):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl apply -f YourBox/pvc-access-pod.yaml -n <namespace> --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.p,{children:"Access Output from Pod:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl exec -it pvc-access-pod -n <namespace> --kubeconfig=YourBox/icc-config.yaml -- /bin/bash\ncd data\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then copy the file locally:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl cp <userspace>/pvc-access-pod:/data/Output_trips.geojson <OUTPUTPATH>/Output_trips.geojson --kubeconfig=YourBox/icc-config.yaml\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Replace Output_trips.geojson with the actual output file name and OUTPUTPATH with the desired local path."})}),"\n",(0,t.jsx)(n.p,{children:"Making Changes to Files or Code:"}),"\n",(0,t.jsx)(n.p,{children:"For code or Dockerfile changes, rebuild the Docker image."}),"\n",(0,t.jsx)(n.p,{children:"For changes to deployment.yaml, configmap.yaml, pvc-access-pod.yaml, or output-pvc.yaml, delete and re-apply the respective\nKubernetes objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl delete pods --all -n <userspace> --kubeconfig=YourBox/icc-config.yaml\nkubectl delete pod <pod-name> -n <userspace> --kubeconfig=YourBox/icc-config.yaml\nkubectl delete configmap soh-logistics-config -n <userspace> --kubeconfig=YourBox/icc-config.yaml\nkubectl delete secret gitlab-registry-secret -n <userspace> --kubeconfig=YourBox/icc-config.yaml\nkubectl delete job soh-logistics-job -n <userspace> --kubeconfig=YourBox/icc-config.yaml\nkubectl delete deployment soh-logistics -n <userspace> --kubeconfig=YourBox/icc-config.yaml\nkubectl delete pvc soh-output-pvc -n <userspace> --kubeconfig=YourBox/icc-config.yaml\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var o=i(96540);const t={},s=o.createContext(t);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);