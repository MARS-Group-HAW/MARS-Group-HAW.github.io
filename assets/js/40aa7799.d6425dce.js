"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9585],{23422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorial/development/layers","title":"Layers","description":"Layers represent the environment in which agents live. They serve as surrounding for their dependent agents. In this context, they are responsible to create their agents. Do not confuse layers with the `Environment`-type that is a data structure that is used for moving and exploring spatial objects (agents and entities). A layer may however use an environment that is used by its agents.","source":"@site/docs/tutorial/development/layers.md","sourceDirName":"tutorial/development","slug":"/tutorial/development/layers","permalink":"/docs/tutorial/development/layers","draft":false,"unlisted":false,"editUrl":"https://github.com/MARS-Group-HAW/MARS-Group-HAW.github.io/edit/main/docs/tutorial/development/layers.md","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"Entity","permalink":"/docs/tutorial/development/entity"},"next":{"title":"Spawning and Removing Agents and Entities","permalink":"/docs/tutorial/development/spawning"}}');var a=t(74848),i=t(28453);const s={sidebar_position:30},o="Layers",l={},c=[{value:"Basic Layer",id:"basic-layer",level:2},{value:"Dependent Layer",id:"dependent-layer",level:2},{value:"Active Layer",id:"active-layer",level:3},{value:"Data Layer",id:"data-layer",level:2},{value:"Raster Layer",id:"raster_layer",level:3},{value:"Vector Layer",id:"vector-layer",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"layers",children:"Layers"})}),"\n",(0,a.jsxs)(n.p,{children:["Layers represent the ",(0,a.jsx)(n.em,{children:"environment"})," in which agents ",(0,a.jsx)(n.em,{children:"live"}),". They serve as surrounding for their dependent agents. In this context, they are responsible to create their agents. Do not confuse layers with the ",(0,a.jsxs)(n.a,{href:"/docs/tutorial/development/environments/",children:[(0,a.jsx)(n.code,{children:"Environment"}),"-type"]})," that is a data structure that is used for moving and exploring spatial objects (",(0,a.jsx)(n.a,{href:"/docs/tutorial/development/agent",children:"agents"})," and ",(0,a.jsx)(n.a,{href:"/docs/tutorial/development/entity",children:"entities"}),"). A layer may however use an environment that is used by its agents."]}),"\n",(0,a.jsxs)(n.p,{children:["Moreover, layers may hold and provide data, depending on their type.  They offer possibilities for input of various data formats (",(0,a.jsx)(n.a,{href:"../data-sources/",children:"see more information about possible inputs"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:["Layers are the central model element in a MARS model and are automatically generated by the MARS runtime system and mutual dependencies between different layers are resolved. They require to be registered in the ",(0,a.jsx)(n.a,{href:"/docs/tutorial/development/model",children:"model description"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"In MARS, the following layers are distinguished"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#basic-layer",children:"Basic Layer"})}),"\n",(0,a.jsxs)(n.li,{children:["Layers with dependencies or activity","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#dependent-layer",children:"Dependent Layer"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#active-layer",children:"Active Layer"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Data Layer","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#vector-layer",children:"Vector Layer"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#raster_layer",children:"Raster Layer"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The layer ",(0,a.jsx)(n.code,{children:"ILayer"})," contract is structured as follows:"]}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n    IModelObject <|-- ILayer\n    ILayer <|-- IDataLayer\n\n    class IModelObject {\n        <<interface>>\n    }\n    class ILayer {\n        <<interface>>\n        +InitLayer(layerInitData:TInitData, registerAgentHandle:RegisterAgent, unregisterAgentHandle:UnregisterAgent) bool\n        +GetCurrentTick() long\n        +SetCurrentTick(currentStep:long)\n    }\n    class IDataLayer {\n        <<interface>>\n    }"}),"\n",(0,a.jsx)(n.h2,{id:"basic-layer",children:"Basic Layer"}),"\n",(0,a.jsxs)(n.p,{children:["To define a layer the ",(0,a.jsx)(n.code,{children:"ILayer"})," interface must be implemented ",(0,a.jsx)(n.strong,{children:"or"})," inherited from the existing abstract implementation ",(0,a.jsx)(n.code,{children:"AbstractLayer"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In the model code, a ",(0,a.jsx)(n.code,{children:"using"})," import for the namespace ",(0,a.jsx)(n.code,{children:"Mars.Components.Layers"})," must be added to the own model file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"using Mars.Components.Layers;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then a new layer type can be defined in the form of a class that inherits from the abstract class ",(0,a.jsx)(n.code,{children:"AbstractLayer"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class MyLayer : AbstractLayer\n{\n    \tpublic override bool InitLayer(TInitData layerInitData, RegisterAgent registerAgentHandle, UnregisterAgent unregisterAgentHandle)\n\t{\n\t    base.InitLayer(layerInitData, registerAgentHandle, unregisterAgentHandle);\n\t\t// Do your initialization logic here.\n\t\treturn true;\n\t} \n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"InitLayer"})," method can be used to execute custom logic, to initialize ",(0,a.jsx)(n.a,{href:"/docs/tutorial/development/environments/",children:"Environments"})," or to ",(0,a.jsx)(n.a,{href:"/docs/tutorial/development/spawning",children:"Spawning"})," agents."]}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["Please note to call the base implementation ",(0,a.jsx)(n.code,{children:"base.InitLayer(layerInitData, registerAgentHandle, unregisterAgentHandle);"})," to ensure correct initialization along the class hierarchy."]})}),"\n",(0,a.jsxs)(n.p,{children:["Layer needs to be registered in the ",(0,a.jsx)(n.code,{children:"ModelDescription"})," by calling the ",(0,a.jsx)(n.code,{children:"AddLayer<TLayer>()"})," in your entry point ",(0,a.jsx)(n.code,{children:"Main()"})," method, to be an active part of the simulation. Active means here that the layer will be managed (initialized and referenced in other active entities) by the MARS framework."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"private static void Main(string[] args)\n{\n var description = new ModelDescription();\n description.AddLayer<MyLayer>();\n //...\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"dependent-layer",children:"Dependent Layer"}),"\n",(0,a.jsxs)(n.p,{children:["If layers needs references to other layer for object and direct agent interaction or just to access data layer, the definition of dependent layers is necessary. Dependent layers are acquired by defining the layer instance as a ",(0,a.jsx)(n.strong,{children:"property"}),". MARS resolves this dependency by using ",(0,a.jsx)(n.code,{children:"PropertyInjection"})," to ",(0,a.jsx)(n.strong,{children:"automatically"})," and assigns the dependent layer to this property."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Cyclic dependencies between Layer can be defined as well, but this is an indication for a bad conceptual design."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class MyLayer : AbstractLayer\n{\n    [PropertyDescription]\n\tpublic MyDependentLayer DependentLayer { get; set; }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"active-layer",children:"Active Layer"}),"\n",(0,a.jsxs)(n.p,{children:["If the layer requires to act within the simulation, it can be made active, which provides the possibility to act before, after and within the tick. The interface ",(0,a.jsx)(n.code,{children:"ISteppedActiveLayer"})," will get ticked by the ",(0,a.jsx)(n.code,{children:"LayerContainer"}),", just as the average ",(0,a.jsx)(n.code,{children:"ITickClient"}),". In Addition, it provides to more methods which allow hooking into the moment just before and after a tick."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class MyLayer : ISteppedActiveLayer\n{\n    public void Tick()\n    {\n        //do something this tick\n    }\n\n    public void PreTick()\n    {\n        //do something bevore the tick\n    }\n\n    public void PostTick()\n    {\n        //do something after the tick\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The base implementation of the ",(0,a.jsx)(n.code,{children:"ISteppedActiveLayer"})," interface is the ",(0,a.jsx)(n.code,{children:"AbstractActiveLayer"})," where each step phase (pre, tick, post) can be overridden and activated for a stepwise behavior on a layer type."]}),"\n",(0,a.jsx)(n.h2,{id:"data-layer",children:"Data Layer"}),"\n",(0,a.jsxs)(n.p,{children:["There are different layer types provides, to integrate data into the model and make it available for agents. To represent spatial components of the model MARS offers raster and vector layers, which can be used to represent the simulation world under consideration (e.g. temperatures, landscapes, buildings, roads, passive objects). All layers can be found in the package ",(0,a.jsx)(n.code,{children:"Mars.Components.Layers"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In the model code a ",(0,a.jsx)(n.code,{children:"using"})," import for the namespace ",(0,a.jsx)(n.code,{children:"Mars.Components.Layers"})," must be added to the own model file, if not already done."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"using Mars.Components.Layers;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"raster_layer",children:"Raster Layer"}),"\n",(0,a.jsx)(n.p,{children:"Raster layer and grid layer are able to process grid and raster data and can be viewed similar to a 2D matrix. Real numerical values are stored in a n x m matrix and have a certain semantic nominal value."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"IRaster"})," contract provides the following functionalities:"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n\n\n    IRaster~TValue~ "<double>" <|-- IRaster\n    IRaster~TValue~ --\x3e "LowerLeft" Position\n    IRaster~TValue~ --\x3e "UpperRight" Position\n\n    IDataLayer <|-- IRasterLayer\n    IRaster <|-- IRasterLayer\n    IDataSet <|-- IRasterLayer\n\n    class IRaster {\n        <<interface>>\n        CalculateStatistics() : void\n    }\n\n    class IRasterLayer {\n        <<interface>>\n        GetValueByGeoPosition(coordinate:Position) double\n        GetValueByGridPosition(coordinate:Position) double\n    }\n\n    class IRaster~TValue~ {\n        <<interface>>\n        CurrentBand int <<get>>\n        NumBands : int <<get>>\n        Width : int <<get>>\n        Height : int <<get>>\n        CellHeight : double <<get>> <<set>>\n        CellWidth : double <<get>> <<set>>\n        StartColumn : int <<get>>\n        StartRow : int <<get>>\n        EndColumn : int <<get>>\n        EndRow : int <<get>>\n        NoDataValue : double <<get>> <<set>>\n        Maximum : double <<get>>\n        Mean : double <<get>>\n        Minimum : double <<get>>\n        ReadBlock(xOff:int, yOff:int, sizeX:int, sizeY:int) : IRaster<TValue>\n        WriteBlock(blockValues:IRaster<TValue>, xOff:int, yOff:int, xSize:int, ySize:int) : void\n    }\n\n    class Position {\n    }\n\n    class IDataLayer {\n    }\n\n    class IDataSet {\n    }'}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"HammerparkRaster",src:t(6031).A+"",width:"1526",height:"882"})}),"\n",(0,a.jsxs)(n.p,{children:["The raster above shows a sample black area which is associated to concrete pixel value. This value can be used to solve problems such as, ",(0,a.jsx)(n.em,{children:"querying a coordinate around the park"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To define a grid layer a new layer must inherit from the abstract ",(0,a.jsx)(n.code,{children:"RasterLayer"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class MyRasterLayer : RasterLayer\n{\n\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The raster layer offers various operations for processing matrix data and allows e.g. k-NN ",(0,a.jsx)(n.code,{children:"Explore"})," queries for nearby cells and coordinates whose nuclei match a condition."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"explore"})," is used to query all raster cells that are within a ",(0,a.jsx)(n.code,{children:"radius"})," and match a selection criterion."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"MyRasterLayer MyRaster { get; set; }\n...\nvar source = Position.CreatePosition(30,40);\nvar result MyRaster.Explore(source, 10, 5);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The call ",(0,a.jsx)(n.code,{children:"Explore(source, 10, 5)"})," returns a sequence of the first ",(0,a.jsx)(n.code,{children:"5"})," cells with their values that are within the ",(0,a.jsx)(n.code,{children:"radius"})," of 10 steps starting from coordinate ",(0,a.jsx)(n.code,{children:"(30,40)"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["Please note that the semantic of the ",(0,a.jsx)(n.code,{children:"radius"})," you specify for the ",(0,a.jsx)(n.code,{children:"Explore"})," depends on the distance function used within the ",(0,a.jsx)(n.code,{children:"raster-layer"})," (",(0,a.jsx)(n.code,{children:"Haversine"})," with ",(0,a.jsx)(n.code,{children:"meter"})," for Geospatial, ",(0,a.jsx)(n.code,{children:"Chebyshev"})," for Grid)."]})}),"\n",(0,a.jsxs)(n.p,{children:["A fourth argument can be used to ",(0,a.jsx)(n.em,{children:"optionally"})," define a selection predicate to search for specific cells that meet a condition."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"MyRasterLayer MyRaster { get; set; }\n//...\nvar source = Position.CreatePosition(30,40);\nvar result MyRaster.Explore(source, 10, -1, cell => cell > 10);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The call ",(0,a.jsx)(n.code,{children:"Explore(source, 10, 5, cell => cell > 10)"})," queries for all cells (",(0,a.jsx)(n.code,{children:"-1"}),") in the radius of ",(0,a.jsx)(n.code,{children:"10"})," whose cell value is greater than ",(0,a.jsx)(n.code,{children:"10"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"vector-layer",children:"Vector Layer"}),"\n",(0,a.jsx)(n.p,{children:"Vector layers are used to map vector objects that can be represented by points, lines or areas. Vector objects are the most commonly used types for modeling the simulated environment."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"HammerparkRaster",src:t(65779).A+"",width:"1500",height:"878"})}),"\n",(0,a.jsxs)(n.p,{children:["The vector layer above shows an example vector layer, building the closed area to represent the park to solve problems such as ",(0,a.jsx)(n.em,{children:"Checking for position, whether they are inside the park or not"}),".",(0,a.jsx)(n.br,{}),"\n","To define a vector layer, a new layer must inherit from the abstract VectorLayer:"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"IVectorLayer"})," contract is providing the following functionalities:"]}),"\n",(0,a.jsx)(n.mermaid,{value:'classDiagram\n    ILayer <|-- IVectorLayer\n\n    IVectorLayer --\x3e "GeometryCollection" IGeometryCollection\n    IVectorLayer --\x3e "Features<IVectorFeature>" Collection1~T~\n\n    IVectorLayer <|-- IVectorLayer1~T~\n    IDataLayer <|-- IVectorLayer1~T~\n\n    IVectorLayer1~T~ --\x3e "TimeSeriesData<DateTime,double>" SortedList2~T1,T2~\n    IVectorLayer1~T~ --\x3e "CoordinateReferenceSystem" ICRSObject\n\n    class ILayer {\n        <<interface>>\n    }\n\n    class IVectorLayer {\n        <<interface>>    \n        SerializeJson() string\n        SerializeFeaturesJson() IEnumerable<string>\n    }\n\n    class IVectorLayer1~T~{\n        <<interface>>\n        CurrentTsIndex int <<get>>\n        GetClosestPoint(gpsCoordinate:Position, maxDistance:double, predicate:Func<T, bool>) Position\n        Distance(featureIndex:int, coords:IEnumerable~Position~) double\n        IsPointInside(coordinate:Position) bool\n        IsMultiPointInside(coords:IEnumerable~Position~) bool\n        IsLineStringInside(coords:IEnumerable~Position~) bool\n        IsMultiPointCrossing(coords:IEnumerable~Position~) bool\n        IsLineStringCrossing(coords:IEnumerable~Position~) bool\n        IsMultiPointIntersecting(coords:IEnumerable~Position~) bool\n        IsLineStringIntersecting(coords:IEnumerable~Position~) bool\n        IsMultiPointOverlapping(coords:IEnumerable~Position~) bool\n        IsLineStringOverlapping(coords:IEnumerable~Position~) bool\n        GetAccumulatedPathRating(source:Position, target:Position, distance:int) double\n        GetAccumulatedPathRating(source:Position, distance:int, bearing:double) double\n        GetTimeseriesDataForCurrentTick() object\n        GetFromDataTable(featureId:int, key:string) object\n        AddToDataTable(featureId:int, key:string, value:object) void\n    }\n\n    class Collection1~T~ {\n    }\n\n    class SortedList2~T1,T2~ {\n    }\n    \n    class ICRSObject {\n\n    }'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class MyVectorLayer : VectorLayer\n{\n\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Features of vector layers (points, lines, surfaces) can be individually abstracted by a model type in MARS. The ",(0,a.jsx)(n.code,{children:"VectorLayer"})," offers a more abstract implementation ",(0,a.jsx)(n.code,{children:"VectorLayer<TFeatureType>"})," for the definition of model types which can be initialized by concrete features from a vector input with data."]}),"\n",(0,a.jsx)(n.p,{children:"An example for an abstract feature can look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class MyVectorFeature : IVectorFeature\n{\n    public double MyFeatureValue { get; set; }\n    \n    public void Init(IFeature feature)\n    {\n        MyFeatureValue = feature.Attributes["valueAttributeName"].Value<double>();\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"MyVectorLayer"})," is queried, concrete ",(0,a.jsx)(n.code,{children:"MyVectorFeature"})," objects are returned and can be processed."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"myVectorLayer.Explore(new[] {9.99967, 53.55285}, 100, 10, myVectorFeature =>\n{\n    return myVectorFeature.MyFeatureValue > 20;\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},6031:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/perfect_raster_hammerpark-f8e60108e1113b8537dec1ecf94b8364.png"},65779:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/vector_hammerpark-40dc700a2059f260c5c211be268628f5.png"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);