"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5579],{58614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"tutorial/configuration/output_filter","title":"Output Filter","description":"Explains how to configure output filters to reduce output size.","source":"@site/docs/tutorial/configuration/output_filter.md","sourceDirName":"tutorial/configuration","slug":"/tutorial/configuration/output_filter","permalink":"/docs/tutorial/configuration/output_filter","draft":false,"unlisted":false,"editUrl":"https://github.com/MARS-Group-HAW/MARS-Group-HAW.github.io/edit/main/docs/tutorial/configuration/output_filter.md","tags":[],"version":"current","sidebarPosition":70,"frontMatter":{"sidebar_position":70,"description":"Explains how to configure output filters to reduce output size."},"sidebar":"tutorialSidebar","previous":{"title":"Simulation Output Formats","permalink":"/docs/tutorial/configuration/sim_output_formats"},"next":{"title":"Data sources","permalink":"/docs/tutorial/data-sources/"}}');var i=n(74848),r=n(28453);const s={sidebar_position:70,description:"Explains how to configure output filters to reduce output size."},a="Output Filter",c={},l=[];function u(e){const t={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"output-filter",children:"Output Filter"})}),"\n",(0,i.jsxs)(t.p,{children:["Since MARS supports model scenarios that can potentially generate huge amount of data, the logging of those extensive data can slow the performance of a model (e.g. SmartOpenHamburg models with a huge set of involved agents). The modeler can only be interested in a specific subset of agents or for specific agent-states, e.g., ",(0,i.jsx)(t.em,{children:"is the agent in specfici state"})," or ",(0,i.jsx)(t.em,{children:"log data only for an agent of specific attribute"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["MARS provides ",(0,i.jsx)(t.code,{children:"outputFilter"}),"s for agent to reduce the amount of logged data to those of interest. A dynamic predicate can be provided to filter those entities matching the condition. An agent or entity type can have an optional ",(0,i.jsx)(t.code,{children:"outputFilter"})," which is able to accept a set of ",(0,i.jsx)(t.code,{children:"AND"})," associated expressions in form of:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",metastring:'title="Agent configuration in the config.js"',children:'{\n    "name": "MyAgent",\n    "count": 10000,\n    "file": "output.csv",\n    "outputFilter": [{\n        "parameter": "Species",\n        "operator": "in",\n        "values": ["SpeciesA", "SpeciesC"]\n    }]\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["For this example for an Agent class ",(0,i.jsx)(t.code,{children:"MyAgent"})," the output rows per tick would only be created, if in the tick the agent's property ",(0,i.jsx)(t.code,{children:"Species"})," has the value ",(0,i.jsx)(t.code,{children:"SpeciesA"})," or ",(0,i.jsx)(t.code,{children:"SpeciesC"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["You can define multiple filter which will be chained. All individual filters must evaluate to ",(0,i.jsx)(t.code,{children:"true"})," if the values of the tick should be logged."]}),"\n",(0,i.jsx)(t.p,{children:"If you don't have a specific property you want to watch for, it can be a good option to define a new property to enable/disable the logging of a tick result like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",metastring:'title="Agent property"',children:"public bool StoreTickResult { get; set; } = false;\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",metastring:'title="Agent configuration in config.js',children:'{\n    "name": "MyAgent",\n    "output": "csv",\n    "outputFilter":[{\n        "parameter": "StoreTickResult",\n        "operator": "in",\n        "values": [true]\n    }]\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In side the ",(0,i.jsx)(t.code,{children:"Tick()"})," method you can now do as follows. This will log all agent properties only when your expression ",(0,i.jsx)(t.code,{children:"YourContraint"})," is ",(0,i.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",metastring:'title="Tick() method with outputFilter"',children:"public void Tick()\n{\n    // at beginning of each tick set \n    // to false to prevent logging\n    StoreTickResult = false;\n\n    // your logic...\n\n    // your logic reached a state where you want \n    // to log all agent properties\n    if (YourConstraint)\n    {\n        StoreTickResult = true;\n    }\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(96540);const i={},r=o.createContext(i);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);